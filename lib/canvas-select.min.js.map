{"version":3,"file":"canvas-select.min.js","sources":["../src/tools.ts","../src/shape/Shape.ts","../src/index.ts","../src/shape/Rect.ts","../src/shape/Polygon.ts","../src/shape/Dot.ts","../src/EventBus.ts","../src/shape/Line.ts","../src/shape/Circle.ts","../src/shape/Grid.ts","../src/shape/Brush.ts","../src/shape/Mask.ts","../src/shape/Pencil.ts"],"sourcesContent":["import Shape from \"./shape/Shape\";\r\n\r\nexport function createUuid(): string {\r\n  const s: any[] = [];\r\n  const hexDigits = \"0123456789abcdef\";\r\n  for (let i = 0; i < 36; i++) {\r\n    const m = Math.floor(Math.random() * 0x10);\r\n    s[i] = hexDigits.slice(m, m + 1);\r\n  }\r\n  s[14] = \"4\";\r\n  const n = (s[19] & 0x3) | 0x8;\r\n  s[19] = hexDigits.slice(n, n + 1);\r\n  s[8] = s[13] = s[18] = s[23] = \"-\";\r\n  const uuid = s.join(\"\");\r\n  return uuid;\r\n}\r\n\r\n/**\r\n * 判断图形是否符合嵌套关系, 业务需求：只需要判断shape2所有的点是否都在shape1内部即可\r\n * @param shape1 参数1\r\n * @param shape2 参数2\r\n * @reutrn Boolean 符合条件返回true 否则返回false\r\n */\r\n\r\nexport function isNested(shape1: any, shape2: any): boolean {\r\n  if (shape1.type === 1 && shape2.type === 1) {\r\n    // 矩形和矩形的判断逻辑\r\n    const [[x1, y1], [x2, y2]] = shape1.coor;\r\n    const [[x3, y3], [x4, y4]] = shape2.coor;\r\n\r\n    // if (x1 >= x3 && y1 >= y3 && x2 <= x4 && y2 <= y4) {\r\n    //   return true; // shape1 嵌套在 shape2 内部\r\n    // } else\r\n    if (x1 <= x3 && y1 <= y3 && x2 >= x4 && y2 >= y4) {\r\n      return true; // shape2 嵌套在 shape1 内部\r\n    } else {\r\n      return false; // 两个矩形没有嵌套关系\r\n    }\r\n  } else if (shape1.type === 1 && shape2.type === 2) {\r\n    // 矩形和多边形的判断逻辑，确保多边形所有的坐标点都在矩形里面\r\n    const [[x1, y1], [x2, y2]] = shape1.coor;\r\n    const vertices = shape2.coor;\r\n\r\n    for (let i = 0; i < vertices.length; i++) {\r\n      const [x, y] = vertices[i];\r\n      if (x < x1 || x > x2 || y < y1 || y > y2) {\r\n        return false; // 多边形的顶点在矩形外部，不嵌套\r\n      }\r\n    }\r\n\r\n    return true; // 所有顶点都在矩形内部，嵌套关系成立\r\n  } else if (shape1.type === 2 && shape2.type === 1) {\r\n    // 多边形和矩形的判断逻辑，确保矩形的所有坐标点都在多边形里面\r\n    const vertices = shape2.coor; // 矩形的顶点坐标\r\n\r\n    for (let i = 0; i < vertices.length; i++) {\r\n      const [x, y] = vertices[i];\r\n      if (!isPointInPolygon(x, y, shape1.coor)) {\r\n        return false; // 有一个坐标点不在多边形范围内，返回false\r\n      }\r\n    }\r\n\r\n    return true; // 所有坐标点都在多边形内部，返回true\r\n  } else if (shape1.type === 2 && shape2.type === 2) {\r\n    // 多边形和多边形的判断逻辑\r\n    const vertices1 = shape1.coor;\r\n    const vertices2 = shape2.coor;\r\n\r\n    for (let i = 0; i < vertices2.length; i++) {\r\n      const [x, y] = vertices2[i];\r\n      if (!isPointInPolygon(x, y, vertices1)) {\r\n        return false; // 多边形2的顶点不都在多边形1内部，不嵌套\r\n      }\r\n    }\r\n\r\n    return true; // 有坐标点都在多边形内部，返回true\r\n  }\r\n}\r\n\r\nfunction isPointInPolygon(x: number, y: number, vertices: any) {\r\n  let inside = false;\r\n  const n = vertices.length;\r\n\r\n  for (let i = 0, j = n - 1; i < n; j = i++) {\r\n    const xi = vertices[i][0];\r\n    const yi = vertices[i][1];\r\n    const xj = vertices[j][0];\r\n    const yj = vertices[j][1];\r\n\r\n    if (yi > y !== yj > y && x < ((xj - xi) * (y - yi)) / (yj - yi) + xi) {\r\n      inside = !inside;\r\n    }\r\n  }\r\n\r\n  return inside;\r\n}\r\n\r\n\r\n\r\n/**\r\n * 深拷贝函数\r\n */\r\nexport function deepClone<T>(obj: T, hash = new WeakMap()): T {\r\n  // 处理原始类型和 null、undefined\r\n  if (obj === null || typeof obj !== 'object') {\r\n    return obj;\r\n  }\r\n\r\n  // 处理循环引用\r\n  if (hash.has(obj)) {\r\n    return hash.get(obj);\r\n  }\r\n\r\n  // 处理 ImageData 对象\r\n  if (obj instanceof ImageData) {\r\n    // 创建一个新的 ImageData 对象，并拷贝其 data 属性\r\n    const newImageData = new ImageData(new Uint8ClampedArray(obj.data), obj.width, obj.height);\r\n    hash.set(obj, newImageData);\r\n    return newImageData as any;\r\n  }\r\n\r\n  // 处理 Date 对象\r\n  if (obj instanceof Date) {\r\n    return new Date(obj.getTime()) as any;\r\n  }\r\n\r\n  // 处理 RegExp 对象\r\n  if (obj instanceof RegExp) {\r\n    return new RegExp(obj.source, obj.flags) as any;\r\n  }\r\n\r\n  // 处理 Map 对象\r\n  if (obj instanceof Map) {\r\n    const result = new Map();\r\n    hash.set(obj, result);\r\n    obj.forEach((value, key) => {\r\n      result.set(deepClone(key, hash), deepClone(value, hash));\r\n    });\r\n    return result as any;\r\n  }\r\n\r\n  // 处理 Set 对象\r\n  if (obj instanceof Set) {\r\n    const result = new Set();\r\n    hash.set(obj, result);\r\n    obj.forEach(value => {\r\n      result.add(deepClone(value, hash));\r\n    });\r\n    return result as any;\r\n  }\r\n\r\n  // 处理数组\r\n  if (Array.isArray(obj)) {\r\n    const result: any[] = [];\r\n    hash.set(obj, result);\r\n    obj.forEach((item, index) => {\r\n      result[index] = deepClone(item, hash);\r\n    });\r\n    return result as T;\r\n  }\r\n\r\n  // 处理对象\r\n  const result = Object.create(Object.getPrototypeOf(obj));\r\n  hash.set(obj, result);\r\n\r\n  Reflect.ownKeys(obj).forEach(key => {\r\n    const value = (obj as any)[key];\r\n    result[key as keyof typeof result] = deepClone(value, hash);\r\n  });\r\n\r\n  return result as T;\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * 判断两个对象的某些keys是否相等\r\n */\r\nexport function deepEqual(obj1: any, obj2: any, keysToCompare?: string[]): boolean {\r\n  // 如果两个对象或数组引用相同，直接返回 true\r\n  if (obj1 === obj2) return true;\r\n\r\n  // 如果 obj1 和 obj2 的 type 都为 8(Mask)，比较特定属性值\r\n  if (obj1.type === 8 && obj2.type === 8) {\r\n    const maskKeysToCompare = ['uuid', 'label', 'maskBase64'];\r\n    for (let key of maskKeysToCompare) {\r\n      if (obj1[key] !== obj2[key]) {\r\n        return false;\r\n      }\r\n    }\r\n    return true; // 如果 uuid, label, maskBase64 都相等，返回 true\r\n  }\r\n\r\n  // 检查是否为对象或数组\r\n  if (typeof obj1 !== 'object' || obj1 === null ||\r\n    typeof obj2 !== 'object' || obj2 === null) {\r\n    return false;\r\n  }\r\n\r\n  // 如果是数组，比较数组长度并递归比较每个元素\r\n  if (Array.isArray(obj1) && Array.isArray(obj2)) {\r\n    if (obj1.length !== obj2.length) return false;\r\n    for (let i = 0; i < obj1.length; i++) {\r\n      if (!deepEqual(obj1[i], obj2[i], keysToCompare)) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  // 如果不是数组，则按对象处理\r\n  const keys1 = keysToCompare || Object.keys(obj1);\r\n\r\n  // 比较对象中的键值对\r\n  for (let key of keys1) {\r\n    if ((!(key in obj1) && (key in obj2) || ((key in obj1) && !(key in obj2))) || !deepEqual(obj1[key], obj2[key])) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\n\r\n","import { createUuid } from \"../tools\";\r\n\r\ninterface ShapeProp {\r\n  type: number;\r\n  [key: string]: any;\r\n}\r\nexport default class Shape {\r\n  /** 标签id */\r\n  public tagId: string = \"\";\r\n  /** 标签名称 */\r\n  public label: string = \"\";\r\n  /** 是否隐藏标签 */\r\n  public hideLabel: boolean;\r\n  /** 是否隐藏标签 */\r\n  public truncated: number = 0;\r\n  /** 坐标 */\r\n  public coor: any[] = [];\r\n  /** 边线颜色 */\r\n  public strokeStyle: string;\r\n  /** 填充颜色 */\r\n  public fillStyle: string;\r\n  /** 边线宽度 */\r\n  public lineWidth: number;\r\n  /** 标签填充颜色 */\r\n  public labelFillStyle: string;\r\n  /** 标签文字颜色 */\r\n  public textFillStyle: string;\r\n  /** 标签文字字体 */\r\n  public labelFont: string;\r\n  /** 标签文字字型 */\r\n  public labelFontFamily: string;\r\n  /** 标签文字字号 */\r\n  public labelFontSize: number;\r\n  /** 1 矩形，2 多边形，3 点，4 折线，5 圆，6 网格 */\r\n  public type: number; // 形状\r\n  /** 当前是否处于活动状态 */\r\n  public active: boolean = false;\r\n  /** 当前是否处于创建状态 */\r\n  public creating: boolean = false;\r\n  /** 当前是否处于拖拽状态 */\r\n  public dragging: boolean = false;\r\n  /** 当前是否处于隐藏状态 */\r\n  public hiddening: boolean = false;\r\n  /** 当前是否处于锁定状态 */\r\n  public locking: boolean = false;\r\n  /** 索引 */\r\n  public index: number;\r\n  /** 唯一标识 */\r\n  public uuid: string = createUuid();\r\n  /** 向上展示label */\r\n  public labelUp: boolean;\r\n  constructor(item: ShapeProp, index: number) {\r\n    this.index = index;\r\n    Object.assign(this, item);\r\n  }\r\n}\r\n","import Rect from \"./shape/Rect\";\r\nimport Polygon from \"./shape/Polygon\";\r\nimport Dot from \"./shape/Dot\";\r\nimport EventBus from \"./EventBus\";\r\nimport Line from \"./shape/Line\";\r\nimport Circle from \"./shape/Circle\";\r\nimport Grid from \"./shape/Grid\";\r\nimport Brush from \"./shape/Brush\";\r\nimport Mask from \"./shape/Mask\";\r\nimport Pencil from \"./shape/Pencil\";\r\nimport pkg from \"../package.json\";\r\nimport { isNested, createUuid, deepClone, deepEqual } from \"./tools\";\r\n\r\nexport type Point = [number, number];\r\nexport type AllShape =\r\n  | Rect\r\n  | Polygon\r\n  | Dot\r\n  | Line\r\n  | Circle\r\n  | Grid\r\n  | Brush\r\n  | Mask\r\n  | Pencil;\r\nenum Shape {\r\n  None,\r\n  Rect,\r\n  Polygon,\r\n  Dot,\r\n  Line,\r\n  Circle,\r\n  Grid,\r\n  Brush,\r\n  Mask,\r\n  Pencil\r\n}\r\n\r\ninterface MagicPoint {\r\n  coor: [number, number];\r\n  color: string;\r\n}\r\nexport default class CanvasSelect extends EventBus {\r\n  /** 当前版本 */\r\n  version = pkg.version;\r\n  /** 只读模式，画布不允许任何交互 */\r\n  lock: boolean = false;\r\n  /** 只读模式，仅支持查看 */\r\n  readonly: boolean = false;\r\n  /** 最小矩形宽度 */\r\n  MIN_WIDTH = 10;\r\n  /** 最小矩形高度 */\r\n  MIN_HEIGHT = 10;\r\n  /** 最小圆形半径 */\r\n  MIN_RADIUS = 5;\r\n  /** 最小轨迹点数 */\r\n  MIN_POINTNUM = 3;\r\n  /** 缩放图像的最小边长 */\r\n  MIN_LENGTH = 140;\r\n  /** 边线颜色 */\r\n  strokeStyle = \"#0f0\";\r\n  /** 填充颜色 */\r\n  fillStyle = \"rgba(0, 0, 255, 0.1)\";\r\n  /** 边线宽度 */\r\n  lineWidth = 2;\r\n  /** 当前选中的标注边线颜色 */\r\n  activeStrokeStyle = \"rgba(0, 0, 255, 1)\";\r\n  /** 当前选中的标注填充颜色 */\r\n  activeFillStyle = \"rgba(0, 0, 255, 1)\";\r\n  /** 控制点边线颜色 */\r\n  ctrlStrokeStyle = \"#000\";\r\n  /** 控制点填充颜色 */\r\n  ctrlFillStyle = \"#fff\";\r\n  /** 控制点半径 */\r\n  ctrlRadius = 3;\r\n  /** 是否隐藏标签 */\r\n  hideLabel = false;\r\n  /** 标签背景填充颜色 */\r\n  labelFillStyle = \"rgba(255, 255, 255, 0.5)\";\r\n  /** 标签字体 */\r\n  // labelFont = '12px sans-serif';\r\n  /** 标签字型 */\r\n  labelFontFamily = \"sans-serif\";\r\n  /** 标签字号 */\r\n  labelFontSize = 12;\r\n  /** 标签文字颜色 */\r\n  textFillStyle = \"#FFFFFF\";\r\n  /** 标签字符最大长度，超出使用省略号 */\r\n  labelMaxLen = 10;\r\n  /** 画布宽度 */\r\n  WIDTH = 0;\r\n  /** 画布高度 */\r\n  HEIGHT = 0;\r\n  /** 背景图src */\r\n  imagesrc = \"\";\r\n  imagealpha = 1;\r\n\r\n  canvas: HTMLCanvasElement;\r\n\r\n  ctx: CanvasRenderingContext2D;\r\n  /** 变化前的所有标注数据 */\r\n  olddataset: AllShape[] = [];\r\n  /** 所有标注数据 */\r\n  dataset: AllShape[] = [];\r\n\r\n  /** 撤销数组最多保存记录条数 */\r\n  MAX_LENGTH = 6;\r\n\r\n  // 保存一次完成的修改后的记录(触发按钮事件或鼠标抬起)\r\n  doneList: AllShape[][] = [];\r\n\r\n  // 保存撤销的记录\r\n  undoList: AllShape[][] = [];\r\n\r\n  /** 记录所有隐藏图形的uuid*/\r\n  hideList: string[] = [];\r\n\r\n  offScreen: HTMLCanvasElement;\r\n\r\n  offScreenCtx: CanvasRenderingContext2D;\r\n  /** 记录锚点距离 */\r\n  remmber: number[][];\r\n  /** 记录鼠标位置 */\r\n  mouse: Point;\r\n  /** 记录背景图鼠标位移 */\r\n  remmberOrigin: number[] = [0, 0];\r\n  /** 0 不创建，1 矩形，2 多边形，3 点，4 折线，5 圆，6 网格, 7 刷子brush, 8 Mask，9 钢笔 */\r\n  createType: Shape = Shape.None; //\r\n  /** 控制点索引 */\r\n  ctrlIndex = -1;\r\n  /** 选中控制点索引 */\r\n  clickIndex = -1;\r\n  /** 背景图片 */\r\n  image: HTMLImageElement = new Image();\r\n  /** 图片原始宽度 */\r\n  IMAGE_ORIGIN_WIDTH: number;\r\n  /** 图片缩放宽度 */\r\n  IMAGE_WIDTH = 0;\r\n  /** 图片原始高度 */\r\n  IMAGE_ORIGIN_HEIGHT = 0;\r\n  /** 图片缩放高度 */\r\n  IMAGE_HEIGHT = 0;\r\n  /** 原点x */\r\n  originX = 0;\r\n  /** 原点y */\r\n  originY = 0;\r\n  /** 缩放步长 */\r\n  scaleStep = 0;\r\n  /** 滚动缩放 */\r\n  scrollZoom = true;\r\n\r\n  private timer: any;\r\n  /** 最小touch双击时间 */\r\n  dblTouch = 300;\r\n  /** 记录touch双击开始时间 */\r\n  dblTouchStore = 0; //\r\n  /** 这个选项可以帮助浏览器进行内部优化 */\r\n  alpha = true;\r\n  /** 专注模式 */\r\n  focusMode = false;\r\n  /** 记录当前事件 */\r\n  private evt: MouseEvent | TouchEvent | KeyboardEvent;\r\n  /** 触控缩放时记录上一次两点距离 */\r\n  scaleTouchStore = 0;\r\n  /** 当前是否为双指触控 */\r\n  isTouch2 = false;\r\n  isMobile = navigator.userAgent.includes(\"Mobile\");\r\n  /** 向上展示label */\r\n  labelUp = false;\r\n  private isCtrlKey = false;\r\n  /** 自定义ctrl快捷键 KeyboardEvent.code */\r\n  ctrlCode = \"ControlLeft\";\r\n  /** 网格右键菜单 */\r\n  gridMenuEnable = true;\r\n  /** 网格选中背景填充颜色 */\r\n  gridSelectedFillStyle = \"rgba(255, 255, 0, 0.8)\";\r\n\r\n  /** 记录是否正在使用brush */\r\n  ispainting = false;\r\n\r\n  /** brush线条样式 */\r\n  brushlineWidth = 1;\r\n  brushstrokeStyle = \"rgba(255, 0, 0, 0.8)\";\r\n\r\n  pencillineWidth = 0.5;\r\n  pencilstrokeStyle = \"rgba(255, 0, 0, 0.8)\";\r\n\r\n  // maskfillStyle = \"rgba(255, 0, 0, 0.5)\";\r\n  mask_alpha = 96;\r\n  densityFactor = 1;\r\n\r\n  /** 记录正在生成轮廓的mask的canvasData */\r\n  activeCanvasData: ImageData | null = null;\r\n  /** 记录正在生成的轮廓 */\r\n  activePolygon: string = \"\";\r\n\r\n  isEraser = false;\r\n  isErasing = false;\r\n\r\n  eraserPoints: [number, number][] = [];\r\n\r\n  eraserSize = 8; // 橡皮擦的半径\r\n\r\n  random_color = [\r\n    { r: 255, g: 0, b: 0 },\r\n    { r: 0, g: 255, b: 0 },\r\n    { r: 0, b: 255, g: 0 }\r\n  ];\r\n\r\n  isMagicToolActive = false;\r\n\r\n  magicPoints: MagicPoint[] = [];\r\n\r\n  /**\r\n   * @param el Valid CSS selector string, or DOM\r\n   * @param src image src\r\n   */\r\n  constructor(el: HTMLCanvasElement | string, src?: string) {\r\n    super();\r\n    this.handleLoad = this.handleLoad.bind(this);\r\n    this.handleContextmenu = this.handleContextmenu.bind(this);\r\n    this.handleMousewheel = this.handleMousewheel.bind(this);\r\n    this.handleMouseDown = this.handleMouseDown.bind(this);\r\n    this.handleMouseMove = this.handleMouseMove.bind(this);\r\n    this.handleMouseUp = this.handleMouseUp.bind(this);\r\n    this.handleDblclick = this.handleDblclick.bind(this);\r\n    this.handleKeyup = this.handleKeyup.bind(this);\r\n    this.handleKeydown = this.handleKeydown.bind(this);\r\n    const container = typeof el === \"string\" ? document.querySelector(el) : el;\r\n    if (container instanceof HTMLCanvasElement) {\r\n      this.canvas = container;\r\n      this.offScreen = document.createElement(\"canvas\");\r\n      this.imagesrc = src;\r\n      this.initSetting();\r\n      this.initEvents();\r\n      src && this.setImage(src);\r\n      for (let i = 1; i <= 255; i++) {\r\n        const red = Math.floor(Math.random() * 256);\r\n        const green = Math.floor(Math.random() * 256);\r\n        const blue = Math.floor(Math.random() * 256);\r\n        this.random_color[i] = { r: red, g: green, b: blue };\r\n      }\r\n    } else {\r\n      console.warn(\"HTMLCanvasElement is required!\");\r\n    }\r\n  }\r\n\r\n  /** 当前选中的标注 */\r\n  get activeShape() {\r\n    return this.dataset.find((x) => x.active) || ({} as any);\r\n  }\r\n\r\n  /** 当前缩放比例 */\r\n  get scale() {\r\n    if (this.IMAGE_ORIGIN_WIDTH && this.IMAGE_WIDTH) {\r\n      return this.IMAGE_WIDTH / this.IMAGE_ORIGIN_WIDTH;\r\n    }\r\n    return 1;\r\n  }\r\n\r\n  /** 图片最小边尺寸 */\r\n  get imageMin() {\r\n    return Math.min(this.IMAGE_WIDTH, this.IMAGE_HEIGHT);\r\n  }\r\n\r\n  /** 图片原始最大边尺寸 */\r\n  get imageOriginMax() {\r\n    return Math.max(this.IMAGE_ORIGIN_WIDTH, this.IMAGE_ORIGIN_HEIGHT);\r\n  }\r\n\r\n  /** 合成事件 */\r\n  private mergeEvent(e: TouchEvent | MouseEvent) {\r\n    let mouseX = 0;\r\n    let mouseY = 0;\r\n    let mouseCX = 0;\r\n    let mouseCY = 0;\r\n    if (this.isMobile) {\r\n      const { clientX, clientY } = (e as TouchEvent).touches[0];\r\n      const target = e.target as HTMLCanvasElement;\r\n      const { left, top } = target.getBoundingClientRect();\r\n      mouseX = Math.round(clientX - left);\r\n      mouseY = Math.round(clientY - top);\r\n      if ((e as TouchEvent).touches.length === 2) {\r\n        const { clientX: clientX1 = 0, clientY: clientY1 = 0 } =\r\n          (e as TouchEvent).touches[1] || {};\r\n        mouseCX = Math.round(\r\n          Math.abs((clientX1 - clientX) / 2 + clientX) - left\r\n        );\r\n        mouseCY = Math.round(\r\n          Math.abs((clientY1 - clientY) / 2 + clientY) - top\r\n        );\r\n      }\r\n    } else {\r\n      mouseX = (e as MouseEvent).offsetX;\r\n      mouseY = (e as MouseEvent).offsetY;\r\n    }\r\n    return { ...e, mouseX, mouseY, mouseCX, mouseCY };\r\n  }\r\n\r\n  private handleLoad() {\r\n    this.emit(\"load\", this.image.src);\r\n    this.IMAGE_ORIGIN_WIDTH = this.IMAGE_WIDTH = this.image.width;\r\n    this.IMAGE_ORIGIN_HEIGHT = this.IMAGE_HEIGHT = this.image.height;\r\n    this.fitZoom();\r\n  }\r\n\r\n  private handleContextmenu(e: MouseEvent) {\r\n    e.preventDefault();\r\n    this.evt = e;\r\n    if (this.lock) return;\r\n  }\r\n\r\n  private handleMousewheel(e: WheelEvent) {\r\n    e.stopPropagation();\r\n    this.evt = e;\r\n    if (this.lock || !this.scrollZoom) return;\r\n    const { mouseX, mouseY } = this.mergeEvent(e);\r\n    this.mouse = [mouseX, mouseY];\r\n    this.setScale(e.deltaY < 0, true);\r\n  }\r\n\r\n  private handleMouseDown(e: MouseEvent | TouchEvent) {\r\n    e.stopPropagation();\r\n    this.evt = e;\r\n    if (this.lock) return;\r\n    const { mouseX, mouseY, mouseCX, mouseCY } = this.mergeEvent(e);\r\n    const offsetX = Math.round(mouseX / this.scale);\r\n    const offsetY = Math.round(mouseY / this.scale);\r\n    this.mouse =\r\n      this.isMobile && (e as TouchEvent).touches.length === 2\r\n        ? [mouseCX, mouseCY]\r\n        : [mouseX, mouseY];\r\n    this.remmberOrigin = [mouseX - this.originX, mouseY - this.originY];\r\n    // 记录变化前的数据\r\n    this.olddataset = deepClone(this.dataset);\r\n    if (\r\n      (!this.isMobile && (e as MouseEvent).buttons === 1) ||\r\n      (this.isMobile && (e as TouchEvent).touches.length === 1)\r\n    ) {\r\n      // 鼠标左键\r\n      const ctrls = this.activeShape.ctrlsData || [];\r\n      this.ctrlIndex = ctrls.findIndex((coor: Point) =>\r\n        this.isPointInCircle(this.mouse, coor, this.ctrlRadius)\r\n      );\r\n      this.clickIndex = this.ctrlIndex; // 记录选中的控制点索引，用于控制点加粗变红和编辑控制点\r\n      if (this.ctrlIndex > -1 && !this.readonly) {\r\n        // 点击到控制点\r\n        console.log(\"this.ctrlIndex\", this.ctrlIndex);\r\n        const [x0, y0] = ctrls[this.ctrlIndex];\r\n        if (\r\n          this.activeShape.type === Shape.Polygon &&\r\n          this.activeShape.coor.length > 2 &&\r\n          this.ctrlIndex === 0\r\n        ) {\r\n          this.handleDblclick(e);\r\n        }\r\n        this.remmber = [[offsetX - x0, offsetY - y0]];\r\n      } else if (this.isInBackground(e)) {\r\n        if (this.activeShape.creating && !this.readonly) {\r\n          // 创建中\r\n          if ([Shape.Polygon, Shape.Line].includes(this.activeShape.type)) {\r\n            const [x, y] =\r\n              this.activeShape.coor[this.activeShape.coor.length - 1];\r\n            if (x !== offsetX && y !== offsetY) {\r\n              const nx = Math.round(offsetX - this.originX / this.scale);\r\n              const ny = Math.round(offsetY - this.originY / this.scale);\r\n              this.activeShape.coor.push([nx, ny]);\r\n            }\r\n          }\r\n        } else if (\r\n          this.createType !== Shape.None &&\r\n          !this.readonly &&\r\n          !this.isCtrlKey\r\n        ) {\r\n          // 开始创建\r\n          let newShape;\r\n          const nx = Math.round(offsetX - this.originX / this.scale);\r\n          const ny = Math.round(offsetY - this.originY / this.scale);\r\n          const curPoint: Point = [nx, ny];\r\n          switch (this.createType) {\r\n            case Shape.Rect:\r\n              newShape = new Rect(\r\n                { coor: [curPoint, curPoint] },\r\n                this.dataset.length\r\n              );\r\n              newShape.creating = true;\r\n              break;\r\n            case Shape.Polygon:\r\n              newShape = new Polygon({ coor: [curPoint] }, this.dataset.length);\r\n              newShape.creating = true;\r\n              break;\r\n            case Shape.Dot:\r\n              newShape = new Dot({ coor: curPoint }, this.dataset.length);\r\n              this.emit(\"add\", newShape);\r\n              break;\r\n            case Shape.Line:\r\n              newShape = new Line({ coor: [curPoint] }, this.dataset.length);\r\n              newShape.creating = true;\r\n              break;\r\n            case Shape.Circle:\r\n              newShape = new Circle({ coor: curPoint }, this.dataset.length);\r\n              newShape.creating = true;\r\n              break;\r\n            case Shape.Grid:\r\n              newShape = new Grid(\r\n                { coor: [curPoint, curPoint] },\r\n                this.dataset.length\r\n              );\r\n              newShape.creating = true;\r\n              break;\r\n            case Shape.Brush:\r\n              newShape = new Brush({ coor: [curPoint] }, this.dataset.length);\r\n              newShape.creating = true;\r\n              newShape.lineWidth = this.brushlineWidth;\r\n              newShape.strokeStyle = this.brushstrokeStyle;\r\n              this.ispainting = true;\r\n              if (this.isEraser) {\r\n                newShape.iseraser = true;\r\n                // this.ctx.save();\r\n                // this.ctx.globalCompositeOperation = 'destination-out';\r\n                // this.ctx.beginPath();\r\n                // this.ctx.arc(this.mouse[0], this.mouse[1], this.brushlineWidth / 2, 0, Math.PI * 2);\r\n                // this.ctx.fill();\r\n                // this.ctx.restore();\r\n                // this.lastX = this.mouse[0];\r\n                // this.lastY = this.mouse[1];\r\n              }\r\n              break;\r\n            case Shape.Pencil:\r\n              newShape = new Pencil({ coor: [curPoint] }, this.dataset.length);\r\n              newShape.creating = true;\r\n              newShape.lineWidth = this.pencillineWidth;\r\n              newShape.strokeStyle = this.pencilstrokeStyle;\r\n              this.ispainting = true;\r\n              break;\r\n            default:\r\n              break;\r\n          }\r\n          this.dataset.forEach((sp) => {\r\n            sp.active = false;\r\n          });\r\n          newShape.active = true;\r\n          this.dataset.push(newShape);\r\n        } else {\r\n          // 是否点击到形状\r\n          const [hitShapeIndex, hitShape] = this.hitOnShape(this.mouse);\r\n          if (hitShapeIndex > -1 && !hitShape.locking && !this.readonly) {\r\n            if (\r\n              hitShape.type === Shape.Dot &&\r\n              \"color\" in hitShape &&\r\n              hitShape.color !== \"\"\r\n            ) {\r\n              return; // 智能标注生成的点不可被选中\r\n            }\r\n            if (hitShape.type === Shape.Brush) {\r\n              if (\"iseraser\" in hitShape && !hitShape.iseraser) {\r\n                this.dataset.forEach(\r\n                  (item, i) => (item.active = i === hitShapeIndex)\r\n                );\r\n                // if (this.activeShape.boundingRect.length === 0) {\r\n                //   this.activeShape.boundingRect = this.removeDuplicatePoints(\r\n                //     hitShape.coor,\r\n                //     true,\r\n                //     false\r\n                //   ).resultRect;\r\n                // }\r\n                this.emit(\"select\", hitShape);\r\n              }\r\n              return; // 刷子、橡皮檫和钢笔轨迹不可被拖拽\r\n            }\r\n            if (hitShape.type === Shape.Pencil) {\r\n              this.dataset.forEach(\r\n                (item, i) => (item.active = i === hitShapeIndex)\r\n              );\r\n              // if (this.activeShape.boundingRect.length === 0) {\r\n              //   this.activeShape.boundingRect = this.removeDuplicatePoints(\r\n              //     hitShape.coor,\r\n              //     true,\r\n              //     false\r\n              //   ).resultRect;\r\n              // }\r\n              this.emit(\"select\", hitShape);\r\n              return; // 刷子、橡皮檫和钢笔轨迹不可被拖拽\r\n            }\r\n            // if(hitShape.type === Shape.Mask){\r\n            //     hitShape.active = true;\r\n            //     this.highlightMask(hitShapeIndex);\r\n            //     return; // 刷子、橡皮檫和钢笔轨迹不可被拖拽\r\n            // }\r\n            hitShape.dragging = true;\r\n            this.dataset.forEach(\r\n              (item, i) => (item.active = i === hitShapeIndex)\r\n            );\r\n            this.dataset.splice(hitShapeIndex, 1, hitShape);\r\n            // this.dataset.push(hitShape);\r\n            if (!this.readonly) {\r\n              this.remmber = [];\r\n              if ([Shape.Dot, Shape.Circle].includes(hitShape.type)) {\r\n                const [x, y] = hitShape.coor;\r\n                this.remmber = [[offsetX - x, offsetY - y]];\r\n              } else {\r\n                hitShape.coor.forEach((pt: any) => {\r\n                  this.remmber.push([offsetX - pt[0], offsetY - pt[1]]);\r\n                });\r\n              }\r\n            }\r\n            this.emit(\"select\", hitShape);\r\n          } else {\r\n            this.activeShape.active = false;\r\n            this.dataset.sort((a, b) => a.index - b.index);\r\n            this.emit(\"select\", null);\r\n          }\r\n        }\r\n        this.update();\r\n      }\r\n    } else if (\r\n      (!this.isMobile && (e as MouseEvent).buttons === 2) ||\r\n      (this.isMobile &&\r\n        (e as TouchEvent).touches.length === 3 &&\r\n        !this.readonly)\r\n    ) {\r\n      // 鼠标右键\r\n      if ([Shape.Grid].includes(this.activeShape.type) && this.gridMenuEnable) {\r\n        const rowCol = prompt(\r\n          \"x 行 y 列 x,y\",\r\n          [this.activeShape.row, this.activeShape.col].join(\",\")\r\n        );\r\n        if (typeof rowCol === \"string\") {\r\n          const [row, col] = rowCol.split(\",\");\r\n          if (/^[1-9]\\d*$/.test(row) && /^[1-9]\\d*$/.test(col)) {\r\n            this.activeShape.row = Number(row);\r\n            this.activeShape.col = Number(col);\r\n            this.update();\r\n          }\r\n        }\r\n      }\r\n      this.emit(\"contextmenu\", e);\r\n    }\r\n  }\r\n\r\n  private handleMouseMove(e: MouseEvent | TouchEvent) {\r\n    e.stopPropagation();\r\n    this.evt = e;\r\n    if (this.lock) return;\r\n    const { mouseX, mouseY, mouseCX, mouseCY } = this.mergeEvent(e);\r\n    const offsetX = Math.round(mouseX / this.scale);\r\n    const offsetY = Math.round(mouseY / this.scale);\r\n    this.mouse =\r\n      this.isMobile && (e as TouchEvent).touches.length === 2\r\n        ? [mouseCX, mouseCY]\r\n        : [mouseX, mouseY];\r\n    if (\r\n      ((!this.isMobile && (e as MouseEvent).buttons === 1) ||\r\n        (this.isMobile && (e as TouchEvent).touches.length === 1)) &&\r\n      this.activeShape.type\r\n    ) {\r\n      if (\r\n        this.ctrlIndex > -1 &&\r\n        this.remmber.length &&\r\n        (this.isInBackground(e) || this.activeShape.type === Shape.Circle)\r\n      ) {\r\n        const [[x, y]] = this.remmber;\r\n        // resize矩形\r\n        if ([Shape.Rect, Shape.Grid].includes(this.activeShape.type)) {\r\n          const [[x0, y0], [x1, y1]] = this.activeShape.coor;\r\n          let coor: Point[] = [];\r\n          switch (this.ctrlIndex) {\r\n            case 0:\r\n              coor = [\r\n                [offsetX - x, offsetY - y],\r\n                [x1, y1]\r\n              ];\r\n              break;\r\n            case 1:\r\n              coor = [\r\n                [x0, offsetY - y],\r\n                [x1, y1]\r\n              ];\r\n              break;\r\n            case 2:\r\n              coor = [\r\n                [x0, offsetY - y],\r\n                [offsetX - x, y1]\r\n              ];\r\n              break;\r\n            case 3:\r\n              coor = [\r\n                [x0, y0],\r\n                [offsetX - x, y1]\r\n              ];\r\n              break;\r\n            case 4:\r\n              coor = [\r\n                [x0, y0],\r\n                [offsetX - x, offsetY - y]\r\n              ];\r\n              break;\r\n            case 5:\r\n              coor = [\r\n                [x0, y0],\r\n                [x1, offsetY - y]\r\n              ];\r\n              break;\r\n            case 6:\r\n              coor = [\r\n                [offsetX - x, y0],\r\n                [x1, offsetY - y]\r\n              ];\r\n              break;\r\n            case 7:\r\n              coor = [\r\n                [offsetX - x, y0],\r\n                [x1, y1]\r\n              ];\r\n              break;\r\n            default:\r\n              break;\r\n          }\r\n          let [[a0, b0], [a1, b1]] = coor;\r\n          if (\r\n            a0 < 0 ||\r\n            a1 < 0 ||\r\n            b0 < 0 ||\r\n            b1 < 0 ||\r\n            a1 > this.IMAGE_ORIGIN_WIDTH ||\r\n            b1 > this.IMAGE_ORIGIN_HEIGHT\r\n          ) {\r\n            // 偶然触发 超出边界处理\r\n            a0 < 0 && (a0 = 0);\r\n            a1 < 0 && (a1 = 0);\r\n            b0 < 0 && (b0 = 0);\r\n            b1 < 0 && (b1 = 0);\r\n            if (a1 > this.IMAGE_ORIGIN_WIDTH) {\r\n              a1 = this.IMAGE_ORIGIN_WIDTH;\r\n            }\r\n            if (b1 > this.IMAGE_ORIGIN_HEIGHT) {\r\n              b1 = this.IMAGE_ORIGIN_HEIGHT;\r\n            }\r\n          }\r\n\r\n          if (a1 - a0 >= this.MIN_WIDTH && b1 - b0 >= this.MIN_HEIGHT) {\r\n            this.activeShape.coor = [\r\n              [a0, b0],\r\n              [a1, b1]\r\n            ];\r\n          } else {\r\n            this.emit(\r\n              \"warn\",\r\n              `Width cannot be less than ${this.MIN_WIDTH},Height cannot be less than${this.MIN_HEIGHT}。`\r\n            );\r\n          }\r\n        } else if (\r\n          [Shape.Polygon, Shape.Line].includes(this.activeShape.type)\r\n        ) {\r\n          const nx = Math.round(offsetX - this.originX / this.scale);\r\n          const ny = Math.round(offsetY - this.originY / this.scale);\r\n          const newPoint = [nx, ny];\r\n          this.activeShape.coor.splice(this.ctrlIndex, 1, newPoint); // 修改点坐标\r\n        } else if (this.activeShape.type === Shape.Circle) {\r\n          const nx = Math.round(offsetX - this.originX / this.scale);\r\n          const newRadius = nx - this.activeShape.coor[0];\r\n          if (newRadius >= this.MIN_RADIUS) this.activeShape.radius = newRadius;\r\n        }\r\n      } else if (this.activeShape.dragging && !this.readonly) {\r\n        // 拖拽\r\n        let coor = [];\r\n        let noLimit = true;\r\n        const w = this.IMAGE_ORIGIN_WIDTH || this.WIDTH;\r\n        const h = this.IMAGE_ORIGIN_HEIGHT || this.HEIGHT;\r\n        if ([Shape.Dot, Shape.Circle].includes(this.activeShape.type)) {\r\n          const [t1, t2] = this.remmber[0];\r\n          const x = offsetX - t1;\r\n          const y = offsetY - t2;\r\n          if (x < 0 || x > w || y < 0 || y > h) noLimit = false;\r\n          coor = [x, y];\r\n        } else {\r\n          for (let i = 0; i < this.activeShape.coor.length; i++) {\r\n            const tar = this.remmber[i];\r\n            const x = offsetX - tar[0];\r\n            const y = offsetY - tar[1];\r\n            if (x < 0 || x > w || y < 0 || y > h) noLimit = false;\r\n            coor.push([x, y]);\r\n          }\r\n        }\r\n        if (noLimit) this.activeShape.coor = coor;\r\n      } else if (this.activeShape.creating && this.isInBackground(e)) {\r\n        const x = Math.round(offsetX - this.originX / this.scale);\r\n        const y = Math.round(offsetY - this.originY / this.scale);\r\n        // 创建矩形\r\n        if ([Shape.Rect, Shape.Grid].includes(this.activeShape.type)) {\r\n          this.activeShape.coor.splice(1, 1, [x, y]);\r\n        } else if (this.activeShape.type === Shape.Circle) {\r\n          const [x0, y0] = this.activeShape.coor;\r\n          const r = Math.sqrt((x0 - x) ** 2 + (y0 - y) ** 2);\r\n          this.activeShape.radius = r;\r\n        } else if (this.ispainting && this.createType === Shape.Brush) {\r\n          const nx = Math.round(offsetX - this.originX / this.scale);\r\n          const ny = Math.round(offsetY - this.originY / this.scale);\r\n          const newPoint: Point = [nx, ny];\r\n          this.activeShape.coor.push(newPoint);\r\n        } else if (this.ispainting && this.createType === Shape.Pencil) {\r\n          const nx = Math.round(offsetX - this.originX / this.scale);\r\n          const ny = Math.round(offsetY - this.originY / this.scale);\r\n          const newPoint: Point = [nx, ny];\r\n          this.activeShape.coor.push(newPoint);\r\n        }\r\n      }\r\n      this.update();\r\n    } else if (\r\n      [Shape.Polygon, Shape.Line, Shape.Brush, Shape.Pencil].includes(\r\n        this.activeShape.type\r\n      ) &&\r\n      this.activeShape.creating\r\n    ) {\r\n      // 多边形添加点\r\n      this.update();\r\n    } else if (\r\n      (!this.isMobile &&\r\n        (e as MouseEvent).buttons === 2 &&\r\n        (e as MouseEvent).which === 3) ||\r\n      (this.isMobile &&\r\n        (e as TouchEvent).touches.length === 1 &&\r\n        !this.isTouch2)\r\n    ) {\r\n      // 拖动背景\r\n      this.originX = Math.round(mouseX - this.remmberOrigin[0]);\r\n      this.originY = Math.round(mouseY - this.remmberOrigin[1]);\r\n      this.emit(\"dragimg\");\r\n      this.update();\r\n    } else if (this.isMobile && (e as TouchEvent).touches.length === 2) {\r\n      this.isTouch2 = true;\r\n      const touch0 = (e as TouchEvent).touches[0];\r\n      const touch1 = (e as TouchEvent).touches[1];\r\n      const cur = this.scaleTouchStore;\r\n      this.scaleTouchStore = Math.abs(\r\n        (touch1.clientX - touch0.clientX) * (touch1.clientY - touch0.clientY)\r\n      );\r\n      this.setScale(this.scaleTouchStore > cur, true);\r\n    }\r\n  }\r\n\r\n  private handleMouseUp(e: MouseEvent | TouchEvent) {\r\n    e.stopPropagation();\r\n    this.evt = e;\r\n    if (this.lock) return;\r\n    if (this.isMobile) {\r\n      if ((e as TouchEvent).touches.length === 0) {\r\n        this.isTouch2 = false;\r\n      }\r\n      if (Date.now() - this.dblTouchStore < this.dblTouch) {\r\n        this.handleDblclick(e);\r\n        return;\r\n      }\r\n      this.dblTouchStore = Date.now();\r\n    }\r\n    this.remmber = [];\r\n    if (this.activeShape.type !== Shape.None && !this.isCtrlKey) {\r\n      // if (this.activeShape.dragging) {\r\n      //   this.activeShape.truncated = 0;\r\n      //   for (let i = 0; i < this.dataset.length; i++) {\r\n      //     if (\r\n      //       this.dataset[i].type === Shape.Rect &&\r\n      //       this.dataset[i].index !== this.activeShape.index\r\n      //     ) {\r\n      //       if (\r\n      //         this.dataset[i].coor[1][0] > this.activeShape.coor[0][0] &&\r\n      //         this.dataset[i].coor[0][0] < this.activeShape.coor[1][0] &&\r\n      //         this.dataset[i].coor[1][1] > this.activeShape.coor[0][1] &&\r\n      //         this.dataset[i].coor[0][1] < this.activeShape.coor[1][1]\r\n      //       ) {\r\n      //         this.activeShape.truncated = 1;\r\n      //       }\r\n      //     }\r\n      //   }\r\n      // }\r\n      this.activeShape.dragging = false;\r\n      if (this.activeShape.creating) {\r\n        if ([Shape.Rect, Shape.Grid].includes(this.activeShape.type)) {\r\n          const [[x0, y0], [x1, y1]] = this.activeShape.coor;\r\n          if (\r\n            Math.abs(x0 - x1) < this.MIN_WIDTH ||\r\n            Math.abs(y0 - y1) < this.MIN_HEIGHT\r\n          ) {\r\n            this.dataset.pop();\r\n            this.emit(\r\n              \"warn\",\r\n              `Width cannot be less than ${this.MIN_WIDTH},Height cannot be less than ${this.MIN_HEIGHT}`\r\n            );\r\n          } else {\r\n            this.activeShape.coor = [\r\n              [Math.min(x0, x1), Math.min(y0, y1)],\r\n              [Math.max(x0, x1), Math.max(y0, y1)]\r\n            ];\r\n            this.activeShape.creating = false;\r\n            this.activeShape.truncated = 0;\r\n            for (let i = 0; i < this.dataset.length; i++) {\r\n              if (\r\n                this.dataset[i].type === Shape.Rect &&\r\n                this.dataset[i].index !== this.activeShape.index\r\n              ) {\r\n                if (\r\n                  this.dataset[i].coor[1][0] > this.activeShape.coor[0][0] &&\r\n                  this.dataset[i].coor[0][0] < this.activeShape.coor[1][0] &&\r\n                  this.dataset[i].coor[1][1] > this.activeShape.coor[0][1] &&\r\n                  this.dataset[i].coor[0][1] < this.activeShape.coor[1][1]\r\n                ) {\r\n                  this.activeShape.truncated = 1;\r\n                }\r\n              }\r\n            }\r\n            this.emit(\"add\", this.activeShape);\r\n          }\r\n        } else if (this.activeShape.type === Shape.Circle) {\r\n          if (this.activeShape.radius < this.MIN_RADIUS) {\r\n            this.dataset.pop();\r\n            this.emit(\"warn\", `Radius cannot be less than ${this.MIN_WIDTH}`);\r\n          } else {\r\n            this.activeShape.creating = false;\r\n            this.emit(\"add\", this.activeShape);\r\n          }\r\n        } else if (this.createType === Shape.Brush) {\r\n          if (this.activeShape.coor.length < this.MIN_POINTNUM) {\r\n            this.dataset.pop();\r\n            this.emit(\r\n              \"warn\",\r\n              `Path points cannot be less than ${this.MIN_POINTNUM}`\r\n            );\r\n          } else {\r\n            this.ispainting = false;\r\n            this.activeShape.creating = false;\r\n            // 去除重复点\r\n            const { resultCoor, resultRect } = this.removeDuplicatePoints(\r\n              this.activeShape.coor,\r\n              true\r\n            );\r\n            this.activeShape.coor = resultCoor;\r\n            this.activeShape.boundingRect = resultRect;\r\n            this.emit(\"add\", this.activeShape);\r\n          }\r\n        } else if (this.createType === Shape.Pencil) {\r\n          if (this.activeShape.coor.length < this.MIN_POINTNUM) {\r\n            this.dataset.pop();\r\n            this.emit(\r\n              \"warn\",\r\n              `Path points cannot be less than ${this.MIN_POINTNUM}`\r\n            );\r\n          } else {\r\n            this.activeShape.coor.push([-1, -1]);\r\n            this.ispainting = false;\r\n            this.activeShape.creating = false;\r\n            // 去除重复点\r\n            const { resultCoor, resultRect } = this.removeDuplicatePoints(\r\n              this.activeShape.coor,\r\n              true\r\n            );\r\n            this.activeShape.coor = resultCoor;\r\n            this.activeShape.boundingRect = resultRect;\r\n            this.emit(\"add\", this.activeShape);\r\n          }\r\n        }\r\n        this.update();\r\n      }\r\n      const condition = [\r\n        \"coor\",\r\n        \"label\",\r\n        \"labelUp\",\r\n        \"lineWidth\",\r\n        \"strokeStyle\",\r\n        \"textFillStyle\",\r\n        \"uuid\",\r\n        \"length\"\r\n      ];\r\n      // console.log(deepEqual(this.olddataset, this.dataset, condition));\r\n      // console.log(\"this.olddataset\", this.olddataset);\r\n      // console.log(\"this.dataset\", this.dataset);\r\n      if (!deepEqual(this.olddataset, this.dataset, condition)) {\r\n        this.manageDoneList(deepClone(this.dataset));\r\n        console.log(\"this.doneList\", this.doneList);\r\n      }\r\n    }\r\n  }\r\n\r\n  private handleDblclick(e: MouseEvent | TouchEvent) {\r\n    e.stopPropagation();\r\n    this.evt = e;\r\n    if (this.lock) return;\r\n    if ([Shape.Polygon, Shape.Line].includes(this.activeShape.type)) {\r\n      const canPolygon =\r\n        this.activeShape.type === Shape.Polygon &&\r\n        this.activeShape.coor.length > 2;\r\n      const canLine =\r\n        this.activeShape.type === Shape.Line &&\r\n        this.activeShape.coor.length > 1;\r\n      if (canPolygon || canLine) {\r\n        this.emit(\"add\", this.activeShape);\r\n        this.activeShape.creating = false;\r\n        this.update();\r\n      }\r\n    } else if ([Shape.Grid].includes(this.activeShape.type)) {\r\n      // 双击切换网格分区选中状态\r\n      if (this.activeShape.active) {\r\n        this.activeShape.gridRects.forEach(\r\n          (rect: { coor: Point[]; index: number }) => {\r\n            if (this.isPointInRect(this.mouse, rect.coor)) {\r\n              const thisIndex = this.activeShape.selected.findIndex(\r\n                (x: number) => rect.index === x\r\n              );\r\n              if (thisIndex > -1) {\r\n                this.activeShape.selected.splice(thisIndex, 1);\r\n              } else {\r\n                this.activeShape.selected.push(rect.index);\r\n              }\r\n            }\r\n          }\r\n        );\r\n        this.update();\r\n      }\r\n    }\r\n  }\r\n  private handleKeydown(e: KeyboardEvent) {\r\n    if (e.code === this.ctrlCode) {\r\n      this.isCtrlKey = true;\r\n    }\r\n  }\r\n\r\n  private handleKeyup(e: KeyboardEvent) {\r\n    if (e.code === this.ctrlCode) {\r\n      this.isCtrlKey = false;\r\n    }\r\n    this.evt = e;\r\n    // 检查是否按下了 Ctrl + V\r\n    if (this.isCtrlKey && e.key === \"v\" && !this.readonly) {\r\n      this.copyByIndex(this.activeShape.index);\r\n      return; // 直接返回，防止执行后续代码\r\n    }\r\n    if (this.lock || document.activeElement !== document.body || this.readonly)\r\n      return;\r\n    if (this.activeShape.type) {\r\n      if (\r\n        [Shape.Polygon, Shape.Line].includes(this.activeShape.type) &&\r\n        e.key === \"Escape\"\r\n      ) {\r\n        if (this.activeShape.coor.length > 1 && this.activeShape.creating) {\r\n          this.activeShape.coor.pop();\r\n        } else {\r\n          this.deleteByIndex(this.activeShape.index);\r\n        }\r\n        this.update();\r\n      } else if (e.key === \"Backspace\" || e.key === \"Delete\") {\r\n        this.deleteByIndex(this.activeShape.index);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** 初始化配置 */\r\n  initSetting() {\r\n    const dpr = window.devicePixelRatio || 1;\r\n    this.canvas.style.userSelect = \"none\";\r\n    this.ctx = this.ctx || this.canvas.getContext(\"2d\", { alpha: this.alpha });\r\n    this.WIDTH = Math.round(this.canvas.clientWidth);\r\n    this.HEIGHT = Math.round(this.canvas.clientHeight);\r\n    this.canvas.width = this.WIDTH * dpr;\r\n    this.canvas.height = this.HEIGHT * dpr;\r\n    this.canvas.style.width = this.WIDTH + \"px\";\r\n    this.canvas.style.height = this.HEIGHT + \"px\";\r\n    this.offScreen.width = this.WIDTH;\r\n    this.offScreen.height = this.HEIGHT;\r\n    this.offScreenCtx =\r\n      this.offScreenCtx ||\r\n      this.offScreen.getContext(\"2d\", { willReadFrequently: true });\r\n    this.ctx.scale(dpr, dpr);\r\n  }\r\n\r\n  /** 初始化事件 */\r\n  initEvents() {\r\n    this.image.addEventListener(\"load\", this.handleLoad);\r\n    this.canvas.addEventListener(\"touchstart\", this.handleMouseDown);\r\n    this.canvas.addEventListener(\"touchmove\", this.handleMouseMove);\r\n    this.canvas.addEventListener(\"touchend\", this.handleMouseUp);\r\n    this.canvas.addEventListener(\"contextmenu\", this.handleContextmenu);\r\n    this.canvas.addEventListener(\"mousewheel\", this.handleMousewheel);\r\n    this.canvas.addEventListener(\"mousedown\", this.handleMouseDown);\r\n    this.canvas.addEventListener(\"mousemove\", this.handleMouseMove);\r\n    this.canvas.addEventListener(\"mouseup\", this.handleMouseUp);\r\n    this.canvas.addEventListener(\"dblclick\", this.handleDblclick);\r\n    document.body.addEventListener(\"keydown\", this.handleKeydown, true);\r\n    document.body.addEventListener(\"keyup\", this.handleKeyup, true);\r\n  }\r\n\r\n  getscaledPoint(e: MouseEvent): Point {\r\n    const { mouseX, mouseY } = this.mergeEvent(e);\r\n    const offsetX = Math.round(mouseX / this.scale);\r\n    const offsetY = Math.round(mouseY / this.scale);\r\n    const nx = Math.round(offsetX - this.originX / this.scale);\r\n    const ny = Math.round(offsetY - this.originY / this.scale);\r\n    return [nx, ny];\r\n  }\r\n\r\n  /**\r\n   * 添加/切换图片\r\n   * @param url 图片链接\r\n   */\r\n  setImage(url: string, alpha: number = 1) {\r\n    // 解决问题：Failed to execute 'toDataURL' on 'HTMLCanvasElement': Tainted canvases may not be exported.\r\n    this.image.crossOrigin = \"Anonymous\";\r\n    this.image.src = url;\r\n    this.imagealpha = alpha;\r\n  }\r\n\r\n  // 异步处理 Mask 形状的创建\r\n  async handleMaskShape(\r\n    item: AllShape,\r\n    index: number\r\n  ): Promise<AllShape | null> {\r\n    let tempshape = new Mask(item, index);\r\n    const maskBase64 = tempshape.maskBase64;\r\n    const maskImage = new Image();\r\n    maskImage.crossOrigin = \"Anonymous\";\r\n    maskImage.src = `data:image/png;base64,${maskBase64}`;\r\n\r\n    return new Promise((resolve, reject) => {\r\n      maskImage.onload = () => {\r\n        const pixels: number[] = [];\r\n        const pixelData = this.getImagedataFromImageClass(maskImage, \"magic\");\r\n\r\n        if (pixelData) {\r\n          // 遍历像素，筛选符合条件的像素点\r\n          for (let i = 0; i < pixelData.length; i += 4) {\r\n            if (\r\n              pixelData[i] === 255 &&\r\n              pixelData[i + 1] === 255 &&\r\n              pixelData[i + 2] === 255\r\n            ) {\r\n              pixels.push(i);\r\n            }\r\n          }\r\n\r\n          tempshape.pixels = pixels;\r\n          tempshape.height = this.IMAGE_HEIGHT;\r\n          tempshape.weight = this.IMAGE_WIDTH;\r\n          tempshape.fillStyle = item.fillStyle;\r\n          tempshape.strokeStyle = item.strokeStyle;\r\n\r\n          // 根据 'maskToPolygon' 判断是否转换为 Polygon 形状\r\n          if (\r\n            \"maskToPolygon\" in item &&\r\n            item.maskToPolygon &&\r\n            tempshape.maskType === \"click\"\r\n          ) {\r\n            this.activeCanvasData = this.putDataOnCanvas(\r\n              this.canvas,\r\n              pixels,\r\n              tempshape.fillStyle,\r\n              false\r\n            );\r\n            const polygonShape = new Polygon(\r\n              {\r\n                coor: this.getContourPointsOfColoredRegion(\r\n                  this.activeCanvasData,\r\n                  0.5\r\n                )\r\n              },\r\n              index\r\n            );\r\n            polygonShape.tagId = item.tagId;\r\n            polygonShape.label = item.label;\r\n            polygonShape.strokeStyle = item.strokeStyle;\r\n            this.activePolygon = polygonShape.uuid;\r\n            resolve(polygonShape);\r\n          } else {\r\n            tempshape.canvasData = this.putDataOnCanvas(\r\n              this.canvas,\r\n              pixels,\r\n              tempshape.fillStyle,\r\n              true\r\n            );\r\n            tempshape.tagId = item.tagId;\r\n            tempshape.label = item.label;\r\n            resolve(tempshape);\r\n          }\r\n\r\n          // 绘制样本点\r\n          this.magicPoints = tempshape.magicPoints;\r\n        } else {\r\n          console.error(\"Failed to get pixel data from mask image\");\r\n          reject(null); // 如果加载像素数据失败，返回 null\r\n        }\r\n      };\r\n\r\n      maskImage.onerror = (err) => {\r\n        console.error(\"Error loading mask image\", err);\r\n        reject(null); // 如果加载图像失败，返回 null\r\n      };\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 设置数据\r\n   * @param data Array\r\n   * @param needCreate Boolean 是否需要创建(当传options时需要，当撤销重做操作传dataset时不需要)\r\n   */\r\n  setData(\r\n    data: AllShape[],\r\n    needCreate: boolean = true,\r\n    toMask: boolean = false\r\n  ) {\r\n    setTimeout(async () => {\r\n      if (needCreate) {\r\n        const initdata: AllShape[] = [];\r\n        const itemIndexMap = new Map<AllShape, number>();\r\n\r\n        // 创建索引映射\r\n        data.forEach((item, index) => {\r\n          itemIndexMap.set(item, index);\r\n        });\r\n        for (const item of data) {\r\n          if (Object.prototype.toString.call(item).includes(\"Object\")) {\r\n            let shape;\r\n            const index = itemIndexMap.get(item)!; // 使用映射获取索引\r\n\r\n            switch (item.type) {\r\n              case Shape.Rect:\r\n                shape = new Rect(item, index); // 注意：这里使用indexOf可能会导致性能问题，如果数组很大或者item没有稳定的引用\r\n                break;\r\n              case Shape.Polygon:\r\n                shape = new Polygon(item, index);\r\n                break;\r\n              case Shape.Dot:\r\n                shape = new Dot(item, index);\r\n                break;\r\n              case Shape.Line:\r\n                shape = new Line(item, index);\r\n                break;\r\n              case Shape.Circle:\r\n                shape = new Circle(item, index);\r\n                break;\r\n              case Shape.Grid:\r\n                shape = new Grid(item, index);\r\n                break;\r\n              case Shape.Brush:\r\n                shape = new Brush(item, index);\r\n                // shape.boundingRect = this.removeDuplicatePoints(\r\n                //   shape.coor,\r\n                //   true,\r\n                //   false\r\n                // ).resultRect;\r\n                break;\r\n              case Shape.Mask:\r\n                shape = await this.handleMaskShape(item, index); // 处理异步操作\r\n                break;\r\n              case Shape.Pencil:\r\n                shape = new Pencil(item, index);\r\n                break;\r\n              default:\r\n                console.warn(\"Invalid shape\", item);\r\n                break;\r\n            }\r\n            if (\r\n              [\r\n                Shape.Rect,\r\n                Shape.Polygon,\r\n                Shape.Dot,\r\n                Shape.Line,\r\n                Shape.Circle,\r\n                Shape.Grid,\r\n                Shape.Brush,\r\n                Shape.Mask,\r\n                Shape.Pencil\r\n              ].includes(item.type)\r\n            ) {\r\n              initdata.push(shape);\r\n            }\r\n          } else {\r\n            console.warn(\"Shape must be an enumerable Object.\", item);\r\n          }\r\n        }\r\n        this.dataset = initdata;\r\n      } else {\r\n        this.dataset = data;\r\n      }\r\n      this.update(toMask);\r\n      if (this.doneList.length === 0 && this.dataset !== undefined) {\r\n        this.manageDoneList(deepClone(this.dataset));\r\n      }\r\n    }, 0); // 延迟执行，确保异步操作在事件循环的下一个tick中执行\r\n  }\r\n\r\n  /**\r\n   * 判断是否在标注实例上\r\n   * @param mousePoint 点击位置\r\n   * @returns\r\n   */\r\n  hitOnShape(mousePoint: Point): [number, AllShape] {\r\n    let hitShapeIndex = -1;\r\n    let hitShape: AllShape;\r\n    for (let i = this.dataset.length - 1; i > -1; i--) {\r\n      const shape = this.dataset[i];\r\n      if (\r\n        this.isPointInBackground(mousePoint) &&\r\n        ((shape.type === Shape.Dot &&\r\n          this.isPointInCircle(\r\n            mousePoint,\r\n            shape.coor as Point,\r\n            this.ctrlRadius\r\n          )) ||\r\n          (shape.type === Shape.Circle &&\r\n            this.isPointInCircle(\r\n              mousePoint,\r\n              shape.coor as Point,\r\n              (shape as Circle).radius * this.scale\r\n            )) ||\r\n          (shape.type === Shape.Rect &&\r\n            this.isPointInRect(mousePoint, (shape as Rect).coor)) ||\r\n          (shape.type === Shape.Polygon &&\r\n            this.isPointInPolygon(mousePoint, (shape as Polygon).coor)) ||\r\n          (shape.type === Shape.Line &&\r\n            this.isPointInLine(mousePoint, (shape as Line).coor)) ||\r\n          (shape.type === Shape.Grid &&\r\n            this.isPointInRect(mousePoint, (shape as Grid).coor)) ||\r\n          (shape.type === Shape.Brush &&\r\n            this.isPointInLine(mousePoint, (shape as Brush).coor)) ||\r\n          (shape.type === Shape.Pencil &&\r\n            this.isPointInPolygon(mousePoint, (shape as Pencil).coor)) ||\r\n          (shape.type === Shape.Mask &&\r\n            this.isMouseInPixelsRegion(mousePoint, (shape as Mask).canvasData)))\r\n      ) {\r\n        if ((this.focusMode && !shape.active) || shape.hiddening) continue;\r\n        hitShapeIndex = i;\r\n        hitShape = shape;\r\n        break;\r\n      }\r\n    }\r\n    return [hitShapeIndex, hitShape];\r\n  }\r\n\r\n  /**\r\n   * 判断是否在标注实例顶点上\r\n   * @param mousePoint 点击位置\r\n   * @returns\r\n   */\r\n  hitOnShapeVertex(): string {\r\n    let mouseType: string;\r\n    const shape = this.activeShape;\r\n    const ctrls = this.activeShape.ctrlsData || [];\r\n    this.ctrlIndex = ctrls.findIndex((coor: Point) =>\r\n      this.isPointInCircle(this.mouse, coor, this.ctrlRadius)\r\n    );\r\n    if (this.ctrlIndex > -1 && !this.readonly && !shape.hiddening) {\r\n      if (shape.type === Shape.Rect) {\r\n        if (this.ctrlIndex === 0) {\r\n          mouseType = \"nw-resize\";\r\n        } else if (this.ctrlIndex === 1) {\r\n          mouseType = \"ns-resize\";\r\n        } else if (this.ctrlIndex === 2) {\r\n          mouseType = \"ne-resize\";\r\n        } else if (this.ctrlIndex === 3) {\r\n          mouseType = \"ew-resize\";\r\n        } else if (this.ctrlIndex === 4) {\r\n          mouseType = \"se-resize\";\r\n        } else if (this.ctrlIndex === 5) {\r\n          mouseType = \"ns-resize\";\r\n        } else if (this.ctrlIndex === 6) {\r\n          mouseType = \"sw-resize\";\r\n        } else {\r\n          mouseType = \"ew-resize\";\r\n        }\r\n      } else if (\r\n        shape.type === Shape.Brush ||\r\n        shape.type === Shape.Pencil ||\r\n        shape.type === Shape.Polygon\r\n      ) {\r\n        mouseType = \"pointer\";\r\n      } else {\r\n        mouseType = \"move\";\r\n      }\r\n    } else {\r\n      mouseType = \"\";\r\n    }\r\n    return mouseType;\r\n  }\r\n\r\n  /**\r\n   * 判断鼠标是否在背景图内部\r\n   * @param e MouseEvent\r\n   * @returns 布尔值\r\n   */\r\n  isInBackground(e: MouseEvent | TouchEvent): boolean {\r\n    const { mouseX, mouseY } = this.mergeEvent(e);\r\n    return (\r\n      mouseX >= this.originX &&\r\n      mouseY >= this.originY &&\r\n      mouseX <= this.originX + this.IMAGE_ORIGIN_WIDTH * this.scale &&\r\n      mouseY <= this.originY + this.IMAGE_ORIGIN_HEIGHT * this.scale\r\n    );\r\n  }\r\n\r\n  /**point\r\n   * 判断点是否在背景图内部\r\n   * @param point Point\r\n   * @returns 布尔值\r\n   */\r\n  isPointInBackground(point: Point): boolean {\r\n    const pointX = point[0]; //???????????????\r\n    const pointY = point[1];\r\n    return (\r\n      pointX >= this.originX &&\r\n      pointY >= this.originY &&\r\n      pointX <= this.originX + this.IMAGE_ORIGIN_WIDTH * this.scale &&\r\n      pointY <= this.originY + this.IMAGE_ORIGIN_HEIGHT * this.scale\r\n    );\r\n  }\r\n\r\n  /**\r\n   * 判断是否在矩形内\r\n   * @param point 坐标\r\n   * @param coor 区域坐标\r\n   * @returns 布尔值\r\n   */\r\n  isPointInRect(point: Point, coor: Point[]): boolean {\r\n    const [x, y] = point;\r\n    const [[x0, y0], [x1, y1]] = coor.map((a) => a.map((b) => b * this.scale));\r\n    return (\r\n      x0 + this.originX < x &&\r\n      x < x1 + this.originX &&\r\n      y0 + this.originY < y &&\r\n      y < y1 + this.originY\r\n    );\r\n  }\r\n\r\n  /**\r\n   * 判断点是否在矩形的边上，并区分是在左右边还是上下边\r\n   * @param point 坐标\r\n   * @param coor 区域坐标\r\n   * @returns 字符串，表示对应的鼠标样式，或 'none' 表示不在边上\r\n   */\r\n  isPointOnRectEdge(point: Point, coor: Point[]): string {\r\n    const [x, y] = point;\r\n    const [[x0, y0], [x1, y1]] = coor.map((a) => a.map((b) => b * this.scale));\r\n    const onLeftEdge =\r\n      x === x0 + this.originX &&\r\n      y >= y0 + this.originY &&\r\n      y <= y1 + this.originY;\r\n    const onRightEdge =\r\n      x === x1 + this.originX &&\r\n      y >= y0 + this.originY &&\r\n      y <= y1 + this.originY;\r\n    const onTopEdge =\r\n      y === y0 + this.originY &&\r\n      x >= x0 + this.originX &&\r\n      x <= x1 + this.originX;\r\n    const onBottomEdge =\r\n      y === y1 + this.originY &&\r\n      x >= x0 + this.originX &&\r\n      x <= x1 + this.originX;\r\n    if (onLeftEdge || onRightEdge) return \"ew-resize\";\r\n    if (onTopEdge || onBottomEdge) return \"ns-resize\";\r\n    return \"none\";\r\n  }\r\n\r\n  /**\r\n   * 判断点是否在矩形的顶点上，并区分是在左上、左下、右上还是右下顶点\r\n   * @param point 坐标\r\n   * @param coor 区域坐标\r\n   * @returns 字符串，表示对应的鼠标样式，或 'none' 表示不在顶点上\r\n   */\r\n  isPointOnRectVertex(point: Point, coor: Point[]): string {\r\n    const [x, y] = point;\r\n    const [[x0, y0], [x1, y1]] = coor.map((a) => a.map((b) => b * this.scale));\r\n    const onLeftTopPoint = x === x0 + this.originX && y === y0 + this.originY;\r\n    const onRightBottomEdge =\r\n      x === x1 + this.originX && y === y1 + this.originY;\r\n    const onRightTopEdge = x === x1 + this.originX && y === y0 + this.originY;\r\n    const onLeftBottomEdge = x === x0 + this.originX && y === y1 + this.originY;\r\n    if (onLeftTopPoint) return \"nw-resize\";\r\n    if (onRightBottomEdge) return \"se-resize\";\r\n    if (onRightTopEdge) return \"ne-resize\";\r\n    if (onLeftBottomEdge) return \"sw-resize\";\r\n    return \"none\";\r\n  }\r\n\r\n  /**\r\n   * 判断是否在多边形内\r\n   * @param point 坐标\r\n   * @param coor 区域坐标\r\n   * @returns 布尔值\r\n   */\r\n  isPointInPolygon(point: Point, coor: Point[]): boolean {\r\n    this.offScreenCtx.save();\r\n    this.offScreenCtx.clearRect(0, 0, this.WIDTH, this.HEIGHT);\r\n    this.offScreenCtx.translate(this.originX, this.originY);\r\n    this.offScreenCtx.beginPath();\r\n    coor.forEach((pt, i) => {\r\n      const [x, y] = pt.map((a) => Math.round(a * this.scale));\r\n      if (i === 0) {\r\n        this.offScreenCtx.moveTo(x, y);\r\n      } else {\r\n        this.offScreenCtx.lineTo(x, y);\r\n      }\r\n    });\r\n    this.offScreenCtx.closePath();\r\n    this.offScreenCtx.fill();\r\n    const areaData = this.offScreenCtx.getImageData(\r\n      0,\r\n      0,\r\n      this.WIDTH,\r\n      this.HEIGHT\r\n    );\r\n    const index = (point[1] - 1) * this.WIDTH * 4 + point[0] * 4;\r\n    this.offScreenCtx.restore();\r\n    return areaData.data[index + 3] !== 0;\r\n  }\r\n\r\n  /**\r\n   * 判断是否在多边形顶点上\r\n   * @param point 坐标\r\n   * @param coor 区域坐标\r\n   * @returns 布尔值\r\n   */\r\n  isPointOnPolygonVertex(point: Point, coor: Point[]): boolean {\r\n    // 遍历每个顶点，检查是否和目标点重合\r\n    return coor.some((pt) => {\r\n      const [x, y] = pt.map((a) => Math.round(a * this.scale));\r\n      return x === point[0] + this.originX && y === point[1] + this.originY;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 判断是否在圆内\r\n   * @param point 坐标\r\n   * @param center 圆心\r\n   * @param r 半径\r\n   * @param needScale 是否为圆形点击检测\r\n   * @returns 布尔值\r\n   */\r\n  isPointInCircle(point: Point, center: Point, r: number): boolean {\r\n    const [x, y] = point;\r\n    const [x0, y0] = center.map((a) => a * this.scale);\r\n    const distance = Math.sqrt(\r\n      (x0 + this.originX - x) ** 2 + (y0 + this.originY - y) ** 2\r\n    );\r\n    return distance <= r;\r\n  }\r\n\r\n  /**\r\n   * 判断是否在圆的顶点上\r\n   * @param point 坐标\r\n   * @param center 圆心\r\n   * @param r 半径\r\n   * @returns 布尔值\r\n   */\r\n  isPointOnCircleVertex(point: Point, center: Point, r: number): boolean {\r\n    const [x, y] = point;\r\n    const [x0, y0] = center.map((a) => a * this.scale);\r\n    return x === x0 + this.originX + r && y === y0 + this.originY;\r\n  }\r\n\r\n  /**\r\n   * 判断是否在折线内\r\n   * @param point 坐标\r\n   * @param coor 区域坐标\r\n   * @returns 布尔值\r\n   */\r\n  isPointInLine(point: Point, coor: Point[]): boolean {\r\n    this.offScreenCtx.save();\r\n    this.offScreenCtx.clearRect(0, 0, this.WIDTH, this.HEIGHT);\r\n    this.offScreenCtx.translate(this.originX, this.originY);\r\n    this.offScreenCtx.lineWidth = this.lineWidth > 5 ? this.lineWidth : 5;\r\n    this.offScreenCtx.beginPath();\r\n    coor.forEach((pt, i) => {\r\n      const [x, y] = pt.map((a) => Math.round(a * this.scale));\r\n      if (i === 0) {\r\n        this.offScreenCtx.moveTo(x, y);\r\n      } else {\r\n        this.offScreenCtx.lineTo(x, y);\r\n      }\r\n    });\r\n    this.offScreenCtx.stroke();\r\n    const areaData = this.offScreenCtx.getImageData(\r\n      0,\r\n      0,\r\n      this.WIDTH,\r\n      this.HEIGHT\r\n    );\r\n    const index = (point[1] - 1) * this.WIDTH * 4 + point[0] * 4;\r\n    this.offScreenCtx.restore();\r\n    return areaData.data[index + 3] !== 0;\r\n  }\r\n\r\n  /**\r\n   * 判断是否在折线内\r\n   * @param mousePoint 鼠标坐标\r\n   * @param pixels 像素点索引列表\r\n   * @returns 布尔值\r\n   */\r\n  isMouseInPixelsRegion(mousePoint: Point, canvasData: ImageData): boolean {\r\n    // 调整鼠标坐标（考虑原点偏移和缩放比例）\r\n    const mouseX = Math.floor(mousePoint[0] - this.originX); // 缩放并调整鼠标的 x 坐标\r\n    const mouseY = Math.floor(mousePoint[1] - this.originY); // 缩放并调整鼠标的 y 坐标\r\n    // console.log(`Adjusted mouse coordinates: (${mouseX}, ${mouseY})`);\r\n\r\n    // 获取指定点的像素数据\r\n    // 注意canvasData的高宽是向下取整，所以this.IMAGE_WIDTH要统一向下取整\r\n    const index = (mouseY * Math.floor(this.IMAGE_WIDTH) + mouseX) * 4;\r\n    const pixelAlpha = canvasData.data[index + 3]; // 获取透明度（alpha 通道）\r\n\r\n    // 判断该点是否在 pixels 区域内\r\n    if (pixelAlpha !== 0) {\r\n      // console.log(\"Mouse is inside the pixel region.\");\r\n      return true; // 如果透明度大于 0，说明该点在像素区域内\r\n    }\r\n\r\n    // console.log(\"Mouse is outside the pixel region.\");\r\n    return false; // 否则返回 false\r\n  }\r\n\r\n  getBoundingBoxOfColoredRegion(canvasData: ImageData): Point[] {\r\n    const data = canvasData.data; // 获取图像的 RGBA 数据\r\n    const width = canvasData.width; // 图像的宽度\r\n    const height = canvasData.height; // 图像的高度\r\n\r\n    let xMin = width,\r\n      xMax = 0,\r\n      yMin = height,\r\n      yMax = 0;\r\n\r\n    // 遍历每个像素\r\n    for (let y = 0; y < height; y++) {\r\n      for (let x = 0; x < width; x++) {\r\n        // 每个像素的 RGBA 数据索引\r\n        const index = (y * width + x) * 4;\r\n\r\n        const r = data[index]; // 红色通道\r\n        const g = data[index + 1]; // 绿色通道\r\n        const b = data[index + 2]; // 蓝色通道\r\n        const a = data[index + 3]; // alpha 通道（透明度）\r\n\r\n        // 判断该像素是否有颜色（alpha不为0或RGB有非零值）\r\n        if (a !== 0 && (r !== 255 || g !== 255 || b !== 255)) {\r\n          // 更新最小和最大坐标\r\n          xMin = Math.min(xMin, x);\r\n          xMax = Math.max(xMax, x);\r\n          yMin = Math.min(yMin, y);\r\n          yMax = Math.max(yMax, y);\r\n        }\r\n      }\r\n    }\r\n\r\n    // 如果没有找到有颜色的像素，返回一个无效的矩形\r\n    if (xMin > xMax || yMin > yMax) {\r\n      return [];\r\n    }\r\n\r\n    return [\r\n      [Math.round(xMin / this.scale), Math.round(yMin / this.scale)],\r\n      [Math.round(xMax / this.scale), Math.round(yMax / this.scale)]\r\n    ];\r\n  }\r\n\r\n  // 提取图像的轮廓点\r\n  getContourPointsOfColoredRegion(\r\n    canvasData: ImageData,\r\n    densityFactor: number = 1\r\n  ): Point[] {\r\n    const data = canvasData.data; // 获取图像的 RGBA 数据\r\n    const width = canvasData.width; // 图像的宽度\r\n    const height = canvasData.height; // 图像的高度\r\n\r\n    const contourPoints: Point[] = [];\r\n\r\n    // 遍历每个像素，寻找有颜色的区域，并根据阈值决定是否为轮廓点\r\n    for (let y = 0; y < height; y++) {\r\n      for (let x = 0; x < width; x++) {\r\n        const index = (y * width + x) * 4;\r\n        const r = data[index]; // 红色通道\r\n        const g = data[index + 1]; // 绿色通道\r\n        const b = data[index + 2]; // 蓝色通道\r\n        const a = data[index + 3]; // alpha 通道（透明度）\r\n\r\n        // 判断是否为轮廓点：该点周围至少有一个邻居透明度为0的点\r\n        if (a !== 0 && (r !== 255 || g !== 255 || b !== 255)) {\r\n          const isBorderPoint = this.isBorderPoint(x, y, width, height, data);\r\n          if (isBorderPoint) {\r\n            contourPoints.push([\r\n              Math.round(x / this.scale),\r\n              Math.round(y / this.scale)\r\n            ]);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // 去除重复点\r\n    const uniquePoints = this.removeDuplicatePoints(\r\n      contourPoints,\r\n      false\r\n    ).resultCoor;\r\n\r\n    // 根据密度因子控制疏密程度\r\n    const sampledPoints = this.samplePointsByDensity(\r\n      uniquePoints,\r\n      densityFactor\r\n    );\r\n\r\n    // 按照顺时针方向以质心为中心排序\r\n    return this.sortByPolarAngle(sampledPoints);\r\n  }\r\n\r\n  // 判断一个点是否是轮廓点\r\n  isBorderPoint(\r\n    x: number,\r\n    y: number,\r\n    width: number,\r\n    height: number,\r\n    data: Uint8ClampedArray\r\n  ): boolean {\r\n    const directions = [\r\n      [-1, 0],\r\n      [1, 0],\r\n      [0, -1],\r\n      [0, 1], // 四个方向\r\n      [-1, -1],\r\n      [-1, 1],\r\n      [1, -1],\r\n      [1, 1] // 四个对角线方向\r\n    ];\r\n\r\n    for (const [dx, dy] of directions) {\r\n      const nx = x + dx;\r\n      const ny = y + dy;\r\n      if (nx >= 0 && nx < width && ny >= 0 && ny < height) {\r\n        const index = (ny * width + nx) * 4;\r\n        const alpha = data[index + 3]; // 获取邻点的透明度\r\n        if (alpha === 0) {\r\n          return true; // 如果邻点是透明的，那么该点为轮廓点\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  // 根据密度因子采样轮廓点\r\n  samplePointsByDensity(points: Point[], densityFactor: number): Point[] {\r\n    const sampledPoints: Point[] = [];\r\n    const step = Math.max(1, Math.floor(1 / densityFactor)); // 控制每隔多少个点采样一次\r\n\r\n    for (let i = 0; i < points.length; i += step) {\r\n      sampledPoints.push(points[i]);\r\n    }\r\n\r\n    return sampledPoints;\r\n  }\r\n\r\n  // 计算质心\r\n  calculateCentroid(points: Point[]): Point {\r\n    let sumX = 0;\r\n    let sumY = 0;\r\n    for (let point of points) {\r\n      sumX += point[0];\r\n      sumY += point[1];\r\n    }\r\n    const count = points.length;\r\n    return [sumX / count, sumY / count]; // 计算质心坐标\r\n  }\r\n\r\n  // 计算极角\r\n  calculatePolarAngle(center: Point, point: Point): number {\r\n    const dx = point[0] - center[0];\r\n    const dy = point[1] - center[1];\r\n    return Math.atan2(dy, dx); // 返回的值是 -PI 到 PI\r\n  }\r\n\r\n  // 按极角排序轮廓点\r\n  sortByPolarAngle(points: Point[]): Point[] {\r\n    const center = this.calculateCentroid(points); // 计算质心\r\n    return points.sort((a, b) => {\r\n      const angleA = this.calculatePolarAngle(center, a);\r\n      const angleB = this.calculatePolarAngle(center, b);\r\n      return angleA - angleB; // 从小到大排序（顺时针）\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 判断是图形是否属于嵌套关系 (目前只支持矩形和多边形)\r\n   * @param shape1 标注实例\r\n   * @param shape2 标注实例\r\n   * @returns 布尔值\r\n   */\r\n  isNested(shape1: Rect | Polygon, shape2: Rect | Polygon): boolean {\r\n    return isNested(shape1, shape2);\r\n  }\r\n\r\n  /**\r\n   * 绘制矩形\r\n   * @param shape 标注实例\r\n   * @returns\r\n   */\r\n  drawRect(shape: Rect, sub?: Record<string, any>) {\r\n    if (shape.coor.length !== 2) return;\r\n    const { strokeStyle, fillStyle, active, creating, coor, lineWidth } = shape;\r\n    const [[x0, y0], [x1, y1]] = coor.map((a: Point) =>\r\n      a.map((b) => Math.round(b * this.scale))\r\n    );\r\n    this.ctx.save();\r\n    this.ctx.lineWidth = lineWidth || this.lineWidth;\r\n    this.ctx.fillStyle =\r\n      active || creating ? this.activeFillStyle : fillStyle || this.fillStyle;\r\n    this.ctx.strokeStyle =\r\n      active || creating\r\n        ? this.activeStrokeStyle\r\n        : strokeStyle || this.strokeStyle;\r\n    const w = x1 - x0;\r\n    const h = y1 - y0;\r\n    if (!creating) this.ctx.fillRect(x0, y0, w, h);\r\n    this.ctx.strokeRect(x0, y0, w, h);\r\n    this.ctx.restore();\r\n    let center = [(coor[1][0] + coor[0][0]) / 2, (coor[1][1] + coor[0][1]) / 2];\r\n    this.drawLabel(center as Point, shape);\r\n  }\r\n\r\n  /**\r\n   * 绘制多边形\r\n   * @param shape 标注实例\r\n   */\r\n  drawPolygon(shape: Polygon) {\r\n    const { strokeStyle, fillStyle, active, creating, coor, lineWidth } = shape;\r\n    this.ctx.save();\r\n    this.ctx.lineJoin = \"round\";\r\n    this.ctx.lineWidth = lineWidth || this.lineWidth;\r\n    this.ctx.fillStyle =\r\n      active || creating ? this.activeFillStyle : fillStyle || this.fillStyle;\r\n    this.ctx.strokeStyle =\r\n      active || creating\r\n        ? this.activeStrokeStyle\r\n        : strokeStyle || this.strokeStyle;\r\n    this.ctx.beginPath();\r\n    coor.forEach((el: Point, i) => {\r\n      const [x, y] = el.map((a) => Math.round(a * this.scale));\r\n      if (i === 0) {\r\n        this.ctx.moveTo(x, y);\r\n      } else {\r\n        this.ctx.lineTo(x, y);\r\n      }\r\n    });\r\n    if (creating) {\r\n      const [x, y] = this.mouse || [];\r\n      this.ctx.lineTo(x - this.originX, y - this.originY);\r\n    } else if (coor.length > 2) {\r\n      this.ctx.closePath();\r\n    }\r\n    this.ctx.fill();\r\n    this.ctx.stroke();\r\n    this.ctx.restore();\r\n    this.drawLabel(this.calculateCenter(coor), shape);\r\n  }\r\n\r\n  /**\r\n   * 绘制点\r\n   * @param shape 标注实例\r\n   */\r\n  drawDot(shape: Dot) {\r\n    if (shape.color === \"\") {\r\n      // 关键点\r\n      const { strokeStyle, fillStyle, active, coor, lineWidth } = shape;\r\n      const [x, y] = coor.map((a) => a * this.scale);\r\n      this.ctx.save();\r\n      this.ctx.lineWidth = lineWidth || this.lineWidth;\r\n      this.ctx.fillStyle = active\r\n        ? this.activeFillStyle\r\n        : fillStyle || this.ctrlFillStyle;\r\n      this.ctx.strokeStyle = active\r\n        ? this.activeStrokeStyle\r\n        : strokeStyle || this.strokeStyle;\r\n      this.ctx.beginPath();\r\n      this.ctx.arc(x, y, this.ctrlRadius, 0, 2 * Math.PI, true);\r\n      this.ctx.fill();\r\n      this.ctx.arc(x, y, this.ctrlRadius, 0, 2 * Math.PI, true);\r\n      this.ctx.stroke();\r\n      this.ctx.restore();\r\n      this.drawLabel(coor as Point, shape);\r\n    } else {\r\n      // 智能标注点（SAM）\r\n      const { color, coor } = shape;\r\n      const [x, y] = coor.map((a) => a * this.scale);\r\n      this.ctx.beginPath();\r\n      this.ctx.arc(x, y, 3, 0, Math.PI * 2);\r\n      this.ctx.fillStyle = `rgba(255, 255, 255, 0.75)`;\r\n      this.ctx.fill();\r\n      this.ctx.strokeStyle = color;\r\n      this.ctx.stroke();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 绘制圆\r\n   * @param shape 标注实例\r\n   */\r\n  drawCirle(shape: Circle) {\r\n    const {\r\n      strokeStyle,\r\n      fillStyle,\r\n      active,\r\n      coor,\r\n      label,\r\n      creating,\r\n      radius,\r\n      ctrlsData,\r\n      lineWidth\r\n    } = shape;\r\n    const [x, y] = coor.map((a) => a * this.scale);\r\n    this.ctx.save();\r\n    this.ctx.lineWidth = lineWidth || this.lineWidth;\r\n    this.ctx.fillStyle =\r\n      active || creating ? this.activeFillStyle : fillStyle || this.fillStyle;\r\n    this.ctx.strokeStyle =\r\n      active || creating\r\n        ? this.activeStrokeStyle\r\n        : strokeStyle || this.strokeStyle;\r\n    this.ctx.beginPath();\r\n    this.ctx.arc(x, y, radius * this.scale, 0, 2 * Math.PI, true);\r\n    this.ctx.fill();\r\n    this.ctx.arc(x, y, radius * this.scale, 0, 2 * Math.PI, true);\r\n    this.ctx.stroke();\r\n    this.ctx.restore();\r\n    this.drawLabel(shape.coor as Point, shape);\r\n  }\r\n\r\n  /**\r\n   * 绘制折线\r\n   * @param shape 标注实例\r\n   */\r\n  drawLine(shape: Line) {\r\n    const { strokeStyle, active, creating, coor, lineWidth } = shape;\r\n    this.ctx.save();\r\n    this.ctx.lineJoin = \"round\";\r\n    this.ctx.lineWidth = lineWidth || this.lineWidth;\r\n    this.ctx.strokeStyle =\r\n      active || creating\r\n        ? this.activeStrokeStyle\r\n        : strokeStyle || this.strokeStyle;\r\n    this.ctx.beginPath();\r\n    coor.forEach((el: Point, i) => {\r\n      const [x, y] = el.map((a) => Math.round(a * this.scale));\r\n      if (i === 0) {\r\n        this.ctx.moveTo(x, y);\r\n      } else {\r\n        this.ctx.lineTo(x, y);\r\n      }\r\n    });\r\n    if (creating) {\r\n      const [x, y] = this.mouse || [];\r\n      this.ctx.lineTo(x - this.originX, y - this.originY);\r\n    }\r\n    this.ctx.stroke();\r\n    this.ctx.restore();\r\n    this.drawLabel(coor[0], shape);\r\n  }\r\n\r\n  hexToRGBA(hex: string, alpha = 0.7) {\r\n    // 去掉 # 号\r\n    let hexCode = hex.replace(/^#/, \"\");\r\n\r\n    // 检查输入的 hex 是否是有效的三位或六位颜色代码\r\n    if (\r\n      !/^[A-Fa-f0-9]{3}$/.test(hexCode) &&\r\n      !/^[A-Fa-f0-9]{6}$/.test(hexCode)\r\n    ) {\r\n      return hex;\r\n    }\r\n\r\n    // 如果是三位颜色代码，扩展为六位\r\n    if (hexCode.length === 3) {\r\n      hexCode = hexCode\r\n        .split(\"\")\r\n        .map((char) => char + char)\r\n        .join(\"\");\r\n    }\r\n\r\n    // 将颜色代码拆分为 R, G, B 组件\r\n    const r = parseInt(hexCode.slice(0, 2), 16); // 提取红色部分\r\n    const g = parseInt(hexCode.slice(2, 4), 16); // 提取绿色部分\r\n    const b = parseInt(hexCode.slice(4, 6), 16); // 提取蓝色部分\r\n\r\n    // 返回带有透明度的 RGBA 格式颜色\r\n    return `rgba(${r}, ${g}, ${b}, ${alpha})`;\r\n  }\r\n\r\n  rgbaToHex(rgba: string, includeAlpha: boolean = false): string {\r\n    // 去掉 rgba 前后的空格和括号\r\n    rgba = rgba.trim().replace(/\\s/g, \"\");\r\n    const rgbaArray = rgba.match(\r\n      /(\\d{1,3}),(\\d{1,3}),(\\d{1,3}),?(\\d+(\\.\\d+)?)?/\r\n    );\r\n\r\n    if (!rgbaArray) {\r\n      return rgba; // 如果输入不是有效的 rgba 格式，返回原字符串\r\n    }\r\n\r\n    const r = parseInt(rgbaArray[1], 10);\r\n    const g = parseInt(rgbaArray[2], 10);\r\n    const b = parseInt(rgbaArray[3], 10);\r\n    const a = rgbaArray[4] ? parseFloat(rgbaArray[4]) : 1.0;\r\n\r\n    // 将 R, G, B 转换为两位的十六进制字符串\r\n    const hexR = r.toString(16).padStart(2, \"0\");\r\n    const hexG = g.toString(16).padStart(2, \"0\");\r\n    const hexB = b.toString(16).padStart(2, \"0\");\r\n\r\n    if (includeAlpha) {\r\n      // 将透明度转换为两位的十六进制字符串\r\n      const hexA = Math.round(a * 255)\r\n        .toString(16)\r\n        .padStart(2, \"0\");\r\n      return `#${hexR}${hexG}${hexB}${hexA}`;\r\n    } else {\r\n      return `#${hexR}${hexG}${hexB}`;\r\n    }\r\n  }\r\n\r\n  isRGBA(color: string): boolean {\r\n    const rgbaRegex =\r\n      /^rgba\\((\\d{1,3}),\\s*(\\d{1,3}),\\s*(\\d{1,3}),\\s*(0(\\.\\d+)?|1(\\.0+)?)\\)$/;\r\n    return rgbaRegex.test(color);\r\n  }\r\n\r\n  removeDuplicatePoints(\r\n    points: [number, number][],\r\n    getBunding: boolean = false,\r\n    removePoints: boolean = true\r\n  ) {\r\n    const seen = new Set();\r\n    const uniquePoints: [number, number][] = [];\r\n    let maxX = points[0][0],\r\n      minX = points[0][0],\r\n      maxY = points[0][1],\r\n      minY = points[0][1];\r\n\r\n    if (!removePoints) {\r\n      if (getBunding) {\r\n        points.forEach((point) => {\r\n          // 计算最大最小值\r\n          if (point[0] !== -1 && point[1] !== -1) {\r\n            maxX = Math.max(maxX, point[0]);\r\n            maxY = Math.max(maxY, point[1]);\r\n            minX = Math.min(minX, point[0]);\r\n            minY = Math.min(minY, point[1]);\r\n          }\r\n        });\r\n        if (this.activeShape.type === Shape.Brush) {\r\n          return {\r\n            resultRect: [\r\n              minX - this.brushlineWidth / 2,\r\n              minY - this.brushlineWidth / 2,\r\n              maxX - minX + this.brushlineWidth,\r\n              maxY - minY + this.brushlineWidth\r\n            ]\r\n          };\r\n        } else {\r\n          return {\r\n            resultRect: [minX, minY, maxX - minX, maxY - minY]\r\n          };\r\n        }\r\n      }\r\n    } else {\r\n      if (getBunding) {\r\n        points.forEach((point) => {\r\n          // 坐标点去重\r\n          const key = `${point[0]},${point[1]}`;\r\n          if (!seen.has(key)) {\r\n            seen.add(key);\r\n            uniquePoints.push(point);\r\n          }\r\n          // 计算最大最小值\r\n          if (getBunding && point[0] !== -1 && point[1] !== -1) {\r\n            maxX = Math.max(maxX, point[0]);\r\n            maxY = Math.max(maxY, point[1]);\r\n            minX = Math.min(minX, point[0]);\r\n            minY = Math.min(minY, point[1]);\r\n          }\r\n        });\r\n        if (this.activeShape.type === Shape.Brush) {\r\n          return {\r\n            resultCoor: uniquePoints,\r\n            resultRect: [\r\n              minX - this.brushlineWidth / 2,\r\n              minY - this.brushlineWidth / 2,\r\n              maxX - minX + this.brushlineWidth,\r\n              maxY - minY + this.brushlineWidth\r\n            ]\r\n          };\r\n        } else {\r\n          return {\r\n            resultCoor: uniquePoints,\r\n            resultRect: [minX, minY, maxX - minX, maxY - minY]\r\n          };\r\n        }\r\n      } else {\r\n        points.forEach((point) => {\r\n          // 坐标点去重\r\n          const key = `${point[0]},${point[1]}`;\r\n          if (!seen.has(key)) {\r\n            seen.add(key);\r\n            uniquePoints.push(point);\r\n          }\r\n        });\r\n        return { resultCoor: uniquePoints };\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 绘制轨迹\r\n   * @param shape 轨迹实例\r\n   */\r\n  drawBrush(shape: Brush) {\r\n    const {\r\n      strokeStyle,\r\n      active,\r\n      creating,\r\n      coor,\r\n      lineWidth,\r\n      iseraser,\r\n      boundingRect\r\n    } = shape;\r\n    this.ctx.save();\r\n    this.ctx.lineJoin = \"round\";\r\n    this.ctx.lineCap = \"round\";\r\n    this.ctx.lineWidth = lineWidth || this.brushlineWidth;\r\n\r\n    // 应用缩放\r\n    this.ctx.scale(this.scale, this.scale);\r\n\r\n    if (coor.length > 1) {\r\n      // 至少两个点才能绘制路径\r\n      if (iseraser) {\r\n        // 设置颜色，包含透明度\r\n        this.ctx.strokeStyle = \"rgba(255, 0, 0, 1)\";\r\n        this.ctx.fillStyle = \"rgba(255, 0, 0, 1)\";\r\n        this.ctx.globalCompositeOperation = \"destination-out\"; // 橡皮擦效果\r\n      } else {\r\n        const color =\r\n          active || creating\r\n            ? this.activeStrokeStyle\r\n            : strokeStyle || this.brushstrokeStyle;\r\n        this.ctx.strokeStyle = color;\r\n        this.ctx.fillStyle = color;\r\n        this.ctx.globalCompositeOperation = \"source-over\";\r\n      }\r\n\r\n      this.ctx.beginPath();\r\n      this.ctx.moveTo(coor[0][0], coor[0][1]); // 从第一个点开始\r\n\r\n      for (let i = 1; i < coor.length; i++) {\r\n        this.ctx.lineTo(coor[i][0], coor[i][1]); // 绘制到下一个点\r\n      }\r\n\r\n      this.ctx.stroke();\r\n\r\n      if (active && this.activeShape.boundingRect.length > 0) {\r\n        const [x, y, w, h] = this.activeShape.boundingRect;\r\n        this.ctx.lineWidth = 1;\r\n        this.ctx.strokeStyle = this.activeStrokeStyle;\r\n        this.ctx.beginPath();\r\n        this.ctx.strokeRect(x, y, w, h);\r\n        this.ctx.stroke();\r\n      }\r\n    }\r\n    this.ctx.restore();\r\n  }\r\n\r\n  /**\r\n   * 绘制网格\r\n   * @param shape 标注实例\r\n   * @returns\r\n   */\r\n  drawGrid(shape: Grid) {\r\n    if (shape.coor.length !== 2) return;\r\n    const { strokeStyle, fillStyle, active, creating, coor, lineWidth } = shape;\r\n    const [[x0, y0], [x1, y1]] = coor.map((a: Point) =>\r\n      a.map((b) => Math.round(b * this.scale))\r\n    );\r\n    this.ctx.save();\r\n    this.ctx.lineWidth = lineWidth || this.lineWidth;\r\n    this.ctx.fillStyle =\r\n      active || creating ? this.activeFillStyle : fillStyle || this.fillStyle;\r\n    this.ctx.strokeStyle =\r\n      active || creating\r\n        ? this.activeStrokeStyle\r\n        : strokeStyle || this.strokeStyle;\r\n    shape.gridRects.forEach((rect: Rect, m) => {\r\n      this.drawRect(rect, {\r\n        selectedFillStyle:\r\n          shape.selectedFillStyle || this.gridSelectedFillStyle,\r\n        isSelected: shape.selected?.includes(m)\r\n      });\r\n    });\r\n    const w = x1 - x0;\r\n    const h = y1 - y0;\r\n    if (!creating) this.ctx.fillRect(x0, y0, w, h);\r\n    this.ctx.strokeRect(x0, y0, w, h);\r\n    this.ctx.restore();\r\n    this.drawLabel(coor[0], shape);\r\n  }\r\n\r\n  /**\r\n   * 绘制控制点\r\n   * @param point 坐标\r\n   */\r\n  drawCtrl(point: Point) {\r\n    const [x, y] = point.map((a) => a * this.scale);\r\n    this.ctx.save();\r\n    this.ctx.beginPath();\r\n    this.ctx.fillStyle = this.ctrlFillStyle;\r\n    this.ctx.strokeStyle = this.ctrlStrokeStyle;\r\n    this.ctx.arc(x, y, this.ctrlRadius, 0, 2 * Math.PI, true);\r\n    this.ctx.fill();\r\n    this.ctx.arc(x, y, this.ctrlRadius, 0, 2 * Math.PI, true);\r\n    this.ctx.stroke();\r\n    this.ctx.restore();\r\n  }\r\n\r\n  /**\r\n   * 绘制控制点列表\r\n   * @param shape 标注实例\r\n   */\r\n  drawCtrlList(shape: Rect | Polygon | Line) {\r\n    shape.ctrlsData.forEach((point, i) => {\r\n      if (\r\n        (shape.type === Shape.Polygon || shape.type === Shape.Line) &&\r\n        (i === this.ctrlIndex || i === this.clickIndex)\r\n      ) {\r\n        this.ctrlStrokeStyle = \"red\";\r\n        this.ctrlRadius = 5;\r\n      } else {\r\n        this.ctrlStrokeStyle = \"#000\";\r\n        this.ctrlRadius = 3;\r\n      }\r\n      if (shape.type === Shape.Circle) {\r\n        if (i === 1) this.drawCtrl(point);\r\n      } else {\r\n        this.drawCtrl(point);\r\n      }\r\n    });\r\n  }\r\n\r\n  // 计算多个坐标的中心位置\r\n  calculateCenter(points: [number, number][]): [number, number] {\r\n    if (points.length === 0) {\r\n      throw new Error(\"Points array cannot be empty.\");\r\n    }\r\n\r\n    const sum = points.reduce(\r\n      (acc, [x, y]) => {\r\n        acc[0] += x; // 累加 x 坐标\r\n        acc[1] += y; // 累加 y 坐标\r\n        return acc;\r\n      },\r\n      [0, 0]\r\n    );\r\n\r\n    const centerX = sum[0] / points.length; // 计算平均 x 坐标\r\n    const centerY = sum[1] / points.length; // 计算平均 y 坐标\r\n\r\n    return [centerX, centerY] as Point; // 返回中心坐标\r\n  }\r\n\r\n  getImagedataFromImageClass = (\r\n    image: HTMLImageElement,\r\n    masktype: string\r\n  ): Uint8ClampedArray | null => {\r\n    // 创建一个临时的 canvas 元素用于处理图像\r\n    const maskCanvas = document.createElement(\"canvas\");\r\n    const maskContext = maskCanvas.getContext(\"2d\", {\r\n      willReadFrequently: true\r\n    });\r\n\r\n    if (!maskCanvas || !maskContext) {\r\n      console.error(\"Canvas or context is not initialized\");\r\n      return null;\r\n    }\r\n\r\n    maskCanvas.width = this.WIDTH;\r\n    maskCanvas.height = this.HEIGHT;\r\n\r\n    // 将图像绘制到临时 canvas 上\r\n    const tmpCanvas = document.createElement(\"canvas\");\r\n    const tmpContext = tmpCanvas.getContext(\"2d\", { willReadFrequently: true });\r\n\r\n    if (!tmpContext) {\r\n      console.error(\"Temporary canvas context is not initialized\");\r\n      return null;\r\n    }\r\n\r\n    tmpCanvas.width = this.WIDTH;\r\n    tmpCanvas.height = this.HEIGHT;\r\n    tmpContext.drawImage(image, 0, 0);\r\n\r\n    let imageData = tmpContext?.getImageData(\r\n      0,\r\n      0,\r\n      tmpCanvas.width,\r\n      tmpCanvas.height\r\n    );\r\n    let pixelData = imageData?.data;\r\n\r\n    if (!pixelData) {\r\n      console.error(\"Failed to retrieve pixel data\");\r\n      return null;\r\n    }\r\n\r\n    // 获取 maskCanvas 的图像数据\r\n    const imageMask = maskContext.getImageData(0, 0, this.WIDTH, this.HEIGHT);\r\n    const maskData = imageMask.data;\r\n\r\n    // 根据 masktype 处理图像数据\r\n    if (masktype === \"everything\") {\r\n      for (let i = 0; i < pixelData.length; i += 4) {\r\n        if (pixelData[i] > 0) {\r\n          const colorIndex = pixelData[i] % this.random_color.length;\r\n          maskData[i] = this.random_color[colorIndex].r; // red\r\n          maskData[i + 1] = this.random_color[colorIndex].g; // green\r\n          maskData[i + 2] = this.random_color[colorIndex].b; // blue\r\n          maskData[i + 3] = this.mask_alpha; // alpha\r\n        }\r\n      }\r\n      maskContext.putImageData(imageMask, 0, 0);\r\n    } else if (masktype === \"rect\") {\r\n    } else if (masktype === \"magic\") {\r\n      let pixels = [];\r\n      // Get the pixel indices of the mask\r\n      for (let i = 0; i < pixelData.length; i += 4) {\r\n        if (\r\n          pixelData[i] == 255 &&\r\n          pixelData[i + 1] == 255 &&\r\n          pixelData[i + 2] == 255\r\n        ) {\r\n          pixels.push(i);\r\n        }\r\n      }\r\n    } else {\r\n      console.error(\"Unknown mask type\");\r\n      return null;\r\n    }\r\n\r\n    // 创建一个新的 canvas 元素并绘制缩放后的图像\r\n    const scaledCanvas = document.createElement(\"canvas\");\r\n    const scaledContext = scaledCanvas.getContext(\"2d\", {\r\n      willReadFrequently: true\r\n    });\r\n\r\n    if (!scaledContext) {\r\n      console.error(\"Scaled canvas context is not initialized\");\r\n      return null;\r\n    }\r\n\r\n    scaledCanvas.width = this.IMAGE_WIDTH;\r\n    scaledCanvas.height = this.IMAGE_HEIGHT;\r\n    scaledContext.drawImage(image, 0, 0, this.IMAGE_WIDTH, this.IMAGE_HEIGHT);\r\n\r\n    // 获取缩放后的图像数据\r\n    const scaledImageData = scaledContext.getImageData(\r\n      0,\r\n      0,\r\n      this.IMAGE_WIDTH,\r\n      this.IMAGE_HEIGHT\r\n    );\r\n    return scaledImageData.data;\r\n  };\r\n\r\n  putDataOnCanvas(\r\n    thisCanvas: HTMLCanvasElement,\r\n    pixels: number[],\r\n    fillStyle: string,\r\n    putImageData: boolean = true\r\n  ) {\r\n    const thisContext = thisCanvas.getContext(\"2d\", {\r\n      willReadFrequently: true\r\n    });\r\n    if (!thisContext) {\r\n      return;\r\n    }\r\n    const canvasData = thisContext.getImageData(\r\n      this.originX,\r\n      this.originY,\r\n      this.IMAGE_WIDTH,\r\n      this.IMAGE_HEIGHT\r\n    );\r\n    const data = canvasData.data;\r\n    const rgbaRegex = /rgba?\\((\\d+), (\\d+), (\\d+)(?:, ([0-9.]+))?\\)/;\r\n    const replacementColor = fillStyle.match(rgbaRegex);\r\n\r\n    for (let i = 0; i < pixels.length; i += 1) {\r\n      data[pixels[i]] = parseInt(replacementColor[1], 10); // red\r\n      data[pixels[i] + 1] = parseInt(replacementColor[2], 10); // green\r\n      data[pixels[i] + 2] = parseInt(replacementColor[3], 10); // blue\r\n      data[pixels[i] + 3] =\r\n        (replacementColor[4] !== undefined\r\n          ? parseFloat(replacementColor[4])\r\n          : 0.5) * 255; // alpha\r\n    }\r\n    if (putImageData) {\r\n      thisContext.putImageData(canvasData, this.originX, this.originY);\r\n    }\r\n    return canvasData;\r\n  }\r\n\r\n  drawPromptPointOnClick = (\r\n    thisPrompt: MagicPoint,\r\n    canvas: HTMLCanvasElement\r\n  ): void => {\r\n    const x = thisPrompt.coor[0] * this.scale;\r\n    const y = thisPrompt.coor[1] * this.scale;\r\n\r\n    const fillColor = `rgba(255, 255, 255, 0.75)`;\r\n    const strokeColor = thisPrompt.color;\r\n\r\n    const context = canvas.getContext(\"2d\", { willReadFrequently: true });\r\n    if (!context) return;\r\n\r\n    context.beginPath();\r\n    context.arc(x, y, 3, 0, Math.PI * 2);\r\n    context.fillStyle = fillColor;\r\n    context.fill();\r\n    context.strokeStyle = strokeColor;\r\n    context.stroke();\r\n  };\r\n\r\n  /**\r\n   * 高亮Mask\r\n   * @param index Mask的索引\r\n   * @param highlight 是否高亮\r\n   * @returns\r\n   */\r\n  highlightMask(index: number) {\r\n    let activeColor = \"\";\r\n    if (index > -1) {\r\n      const shape = this.dataset[index];\r\n      activeColor = shape.fillStyle.replace(\r\n        /rgba\\((\\d+), (\\d+), (\\d+), (\\d+(\\.\\d+)?)\\)/,\r\n        (match, r, g, b, a) => {\r\n          return `rgba(${r}, ${g}, ${b}, 0.75)`;\r\n        }\r\n      );\r\n      shape.fillStyle = activeColor;\r\n      // this.update();\r\n    } else {\r\n      // let state = false;\r\n      for (let i = 0; i < this.dataset.length; i++) {\r\n        if (this.dataset[i].type === Shape.Mask) {\r\n          activeColor = this.dataset[i].fillStyle.replace(\r\n            /rgba\\((\\d+), (\\d+), (\\d+), (\\d+(\\.\\d+)?)\\)/,\r\n            (match, r, g, b, a) => {\r\n              return `rgba(${r}, ${g}, ${b}, 0.5)`;\r\n            }\r\n          );\r\n          this.dataset[i].fillStyle = activeColor;\r\n          // state = true;\r\n        }\r\n      }\r\n      // if(state){\r\n      //     this.update();\r\n      // }\r\n    }\r\n    this.update(); // 此处，一方面用于更新Mask高亮；另一方面用于更新控制点加粗变红\r\n  }\r\n\r\n  changeMaskPolygon(densityFactor: number) {\r\n    const polygonShape = this.dataset.find(\r\n      (item) => item.uuid === this.activePolygon\r\n    );\r\n    polygonShape.coor = this.getContourPointsOfColoredRegion(\r\n      this.activeCanvasData,\r\n      densityFactor\r\n    );\r\n    this.update();\r\n  }\r\n\r\n  endMagicTool() {\r\n    this.manageDoneList(deepClone(this.dataset));\r\n  }\r\n\r\n  /**\r\n   * 绘制Mask\r\n   * @param shape 标注实例\r\n   * @returns\r\n   */\r\n  drawMask(shape: Mask) {\r\n    if (\r\n      shape.pixels.length !== 0 &&\r\n      shape.height === this.IMAGE_HEIGHT &&\r\n      shape.weight === this.IMAGE_WIDTH\r\n    ) {\r\n      this.putDataOnCanvas(this.canvas, shape.pixels, shape.fillStyle);\r\n      // console.log(shape.pixels);\r\n      return;\r\n    }\r\n    const maskBase64 = shape.maskBase64;\r\n    // 将 base64 转换为图像\r\n    const maskImage = new Image();\r\n    maskImage.crossOrigin = \"Anonymous\";\r\n    maskImage.src = `data:image/png;base64,${maskBase64}`;\r\n\r\n    const self = this;\r\n\r\n    // 处理图像数据\r\n    maskImage.onload = () => {\r\n      if (shape.maskType === \"everything\") {\r\n        const pixelData = self.getImagedataFromImageClass(\r\n          maskImage,\r\n          \"everything\"\r\n        );\r\n\r\n        if (pixelData) {\r\n          const canvasData = self.ctx.getImageData(\r\n            self.originX,\r\n            self.originY,\r\n            self.IMAGE_WIDTH,\r\n            self.IMAGE_HEIGHT\r\n          );\r\n          const data = canvasData.data;\r\n\r\n          // 遍历图像像素并修改对应的颜色\r\n          for (let i = 0; i < pixelData.length; i += 4) {\r\n            if (pixelData[i] > 0) {\r\n              const color =\r\n                self.random_color[pixelData[i] % self.random_color.length];\r\n              data[i] = color.r; // red\r\n              data[i + 1] = color.g; // green\r\n              data[i + 2] = color.b; // blue\r\n              data[i + 3] = this.mask_alpha; // alpha\r\n            }\r\n          }\r\n\r\n          // 更新 canvas 上的图像数据\r\n          self.ctx.putImageData(canvasData, self.originX, self.originY);\r\n        }\r\n      } else if (shape.maskType === \"click\") {\r\n        const pixels: number[] = []; // 保存所有符合条件的像素的索引位置\r\n        const pixelData = self.getImagedataFromImageClass(maskImage, \"magic\");\r\n\r\n        if (pixelData) {\r\n          for (let i = 0; i < pixelData.length; i += 4) {\r\n            if (\r\n              pixelData[i] === 255 &&\r\n              pixelData[i + 1] === 255 &&\r\n              pixelData[i + 2] === 255\r\n            ) {\r\n              pixels.push(i);\r\n            }\r\n          }\r\n\r\n          shape.pixels = pixels;\r\n          shape.height = self.IMAGE_HEIGHT;\r\n          shape.weight = self.IMAGE_WIDTH;\r\n          shape.fillStyle = shape.strokeStyle;\r\n\r\n          shape.canvasData = self.putDataOnCanvas(\r\n            self.canvas,\r\n            pixels,\r\n            shape.fillStyle\r\n          );\r\n        } else {\r\n          console.error(\"Failed to get pixel data from mask image\");\r\n        }\r\n      } else {\r\n      }\r\n    };\r\n  }\r\n\r\n  addPoint() {\r\n    const shape = this.activeShape;\r\n    if (\r\n      Object.keys(shape).length !== 0 &&\r\n      this.clickIndex > -1 &&\r\n      !this.readonly\r\n    ) {\r\n      const [x, y] = this.activeShape.coor[this.clickIndex];\r\n      const nx = Math.round(x + 3);\r\n      const ny = Math.round(y + 3);\r\n      shape.coor.splice(this.clickIndex + 1, 0, [nx, ny]);\r\n      this.clickIndex++;\r\n      this.update();\r\n      this.manageDoneList(deepClone(this.dataset));\r\n    }\r\n  }\r\n\r\n  deletePoint() {\r\n    const shape = this.activeShape;\r\n    if (\r\n      Object.keys(shape).length !== 0 &&\r\n      shape.coor.length > 3 &&\r\n      this.clickIndex > -1 &&\r\n      !this.readonly\r\n    ) {\r\n      shape.coor.splice(this.clickIndex, 1);\r\n      this.update();\r\n      this.manageDoneList(deepClone(this.dataset));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 绘制路径线段\r\n   * @param shape 标注实例\r\n   * @returns\r\n   */\r\n  drawPencil(shape: Pencil) {\r\n    const { strokeStyle, fillStyle, active, creating, coor, lineWidth } = shape;\r\n\r\n    // 保存上下文状态\r\n    this.ctx.save();\r\n\r\n    // 设置绘制样式\r\n    this.ctx.lineJoin = \"round\"; // 线条连接处圆角处理\r\n    this.ctx.lineCap = \"round\"; // 线条端点圆角处理\r\n    this.ctx.lineWidth = lineWidth || this.pencillineWidth; // 设置线条宽度\r\n\r\n    // 设置颜色，包含透明度\r\n    this.ctx.strokeStyle =\r\n      active || creating\r\n        ? this.activeStrokeStyle\r\n        : strokeStyle || this.pencilstrokeStyle;\r\n    this.ctx.fillStyle =\r\n      active || creating\r\n        ? this.activeFillStyle\r\n        : fillStyle || this.pencilstrokeStyle;\r\n\r\n    // 应用缩放\r\n    this.ctx.scale(this.scale, this.scale);\r\n\r\n    // 如果有足够的点进行绘制\r\n    if (coor.length > 1) {\r\n      // 检查是否有结束标志点 (-1, -1)\r\n      const hasEndPoint = coor.some(\r\n        (point) => point[0] === -1 && point[1] === -1\r\n      );\r\n\r\n      // 过滤掉结束标志点\r\n      const validCoor = coor.filter(\r\n        (point) => !(point[0] === -1 && point[1] === -1)\r\n      );\r\n\r\n      if (validCoor.length > 1) {\r\n        // 设置全局组合操作\r\n        this.ctx.globalCompositeOperation = \"source-over\"; // 默认绘制模式\r\n\r\n        // 开始路径\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(validCoor[0][0], validCoor[0][1]); // 从第一个点开始\r\n\r\n        // 遍历有效坐标绘制线段\r\n        for (let i = 1; i < validCoor.length; i++) {\r\n          this.ctx.lineTo(validCoor[i][0], validCoor[i][1]); // 绘制到下一个点\r\n        }\r\n\r\n        // 如果有结束标志点，则首尾相连\r\n        if (hasEndPoint) {\r\n          this.ctx.closePath(); // 首尾相连\r\n        }\r\n      }\r\n\r\n      if (active && this.activeShape.boundingRect.length > 0) {\r\n        const [x, y, w, h] = this.activeShape.boundingRect;\r\n        this.ctx.lineWidth = 1;\r\n        this.ctx.strokeStyle = this.activeStrokeStyle;\r\n        this.ctx.strokeRect(x, y, w, h);\r\n      }\r\n\r\n      // 绘制路径\r\n      this.ctx.stroke();\r\n\r\n      // 如果路径闭合，填充封闭区域\r\n      if (hasEndPoint) {\r\n        this.ctx.clip(); // 限制填充区域到路径范围\r\n        this.ctx.fill();\r\n      }\r\n    }\r\n    // 恢复上下文状态\r\n    this.ctx.restore();\r\n  }\r\n\r\n  /**\r\n   * 绘制label\r\n   * @param point 位置\r\n   * @param label 文本\r\n   */\r\n  drawLabel(point: Point, shape: AllShape) {\r\n    const {\r\n      label = \"\",\r\n      labelFillStyle = \"\",\r\n      labelFontSize = 12,\r\n      labelFontFamily = \"\",\r\n      textFillStyle = \"\",\r\n      hideLabel,\r\n      labelUp,\r\n      lineWidth\r\n    } = shape;\r\n    const isHideLabel =\r\n      typeof hideLabel === \"boolean\" ? hideLabel : this.hideLabel;\r\n    const isLabelUp = typeof labelUp === \"boolean\" ? labelUp : this.labelUp;\r\n    const currLineWidth = lineWidth || this.lineWidth;\r\n\r\n    if (label.length && !isHideLabel) {\r\n      // 设置字体大小为矩形高度的一个比例\r\n      const textPaddingLeft = 4;\r\n      const textPaddingTop = 4;\r\n      const newText =\r\n        label.length < this.labelMaxLen + 1\r\n          ? label\r\n          : `${label.slice(0, this.labelMaxLen)}...`;\r\n      const text = this.ctx.measureText(newText);\r\n      const font = parseInt(this.ctx.font) - 4;\r\n\r\n      const labelWidth = text.width + textPaddingLeft * 2;\r\n      const labelHeight = font + textPaddingTop * 2;\r\n\r\n      let [x, y] = point.map((a) => a * this.scale);\r\n\r\n      // 以point为中心创建label\r\n      if (shape.type === 1 || shape.type === 2 || shape.type === 5) {\r\n        x = x - (labelWidth / 2) * this.scale;\r\n        y = y - (labelHeight / 2) * this.scale;\r\n      }\r\n\r\n      const toleft =\r\n        this.IMAGE_ORIGIN_WIDTH - point[0] < labelWidth / this.scale;\r\n      const toTop =\r\n        this.IMAGE_ORIGIN_HEIGHT - point[1] < labelHeight / this.scale;\r\n      const toTop2 = point[1] > labelHeight / this.scale;\r\n      const isup = isLabelUp ? toTop2 : toTop;\r\n      this.ctx.save();\r\n\r\n      // 设置矩形样式\r\n      this.ctx.fillStyle = labelFillStyle || this.labelFillStyle;\r\n\r\n      // 绘制矩形，考虑缩放因子\r\n      const rectX = toleft\r\n        ? x - text.width - textPaddingLeft - currLineWidth / 2\r\n        : x + currLineWidth / 2;\r\n      const rectY = isup\r\n        ? y - labelHeight - currLineWidth / 2\r\n        : y + currLineWidth / 2;\r\n      const rectWidth = labelWidth * this.scale;\r\n      const rectHeight = labelHeight * this.scale;\r\n\r\n      this.ctx.fillRect(rectX, rectY, rectWidth, rectHeight);\r\n\r\n      // 计算字体大小，使其与矩形的大小匹配\r\n      const fontSize = (Math.min(rectWidth, rectHeight) / 4) * 3; // 字体大小与矩形最小边长成比例\r\n\r\n      // 设置文本样式并考虑缩放\r\n      this.ctx.font = `${fontSize}px ${labelFontFamily || \"sans-serif\"}`;\r\n\r\n      this.ctx.fillStyle = textFillStyle || this.textFillStyle;\r\n\r\n      // 获取文本的实际宽度，用于居中计算\r\n      const textWidth = this.ctx.measureText(newText).width;\r\n\r\n      // 获取文本的实际高度，用于垂直居中计算\r\n      const textMetrics = this.ctx.measureText(newText);\r\n      const textHeight =\r\n        textMetrics.fontBoundingBoxAscent + textMetrics.fontBoundingBoxDescent;\r\n\r\n      // 设置文本的基线对齐方式为中间\r\n      this.ctx.textBaseline = \"middle\"; // 设置基线为中间，便于精确控制位置\r\n\r\n      // 计算文本的横向和纵向居中位置\r\n      const textX = rectX + (rectWidth - textWidth) / 2; // 横向居中\r\n      const textY = rectY + rectHeight / 2; // 垂直居中，基于矩形的中间位置减去文本高度的一半\r\n\r\n      // 绘制居中的文本，考虑缩放\r\n      this.ctx.fillText(newText, textX, textY, rectWidth);\r\n\r\n      // 恢复上下文\r\n      this.ctx.restore();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 更新画布\r\n   */\r\n  update(toMask: boolean = false) {\r\n    window.cancelAnimationFrame(this.timer);\r\n    this.timer = window.requestAnimationFrame(() => {\r\n      this.ctx.save();\r\n      this.ctx.clearRect(0, 0, this.WIDTH, this.HEIGHT);\r\n      this.ctx.translate(this.originX, this.originY); // 位置映射，（0,0）对应着（this.originX, this.originY）\r\n      if (this.IMAGE_WIDTH && this.IMAGE_HEIGHT) {\r\n        if (toMask) {\r\n          // 获取图像的像素数据\r\n          const imageData = this.ctx.getImageData(\r\n            0,\r\n            0,\r\n            this.IMAGE_WIDTH,\r\n            this.IMAGE_HEIGHT\r\n          );\r\n          const data = imageData.data;\r\n\r\n          // 将所有像素的 RGB 值设置为 0 (黑色)\r\n          for (let i = 0; i < data.length; i += 4) {\r\n            data[i] = 0; // Red\r\n            data[i + 1] = 0; // Green\r\n            data[i + 2] = 0; // Blue\r\n            data[i + 3] = 255; // alpha\r\n          }\r\n\r\n          // 将修改后的像素数据重新放回画布\r\n          this.ctx.putImageData(imageData, this.originX, this.originY);\r\n        } else {\r\n          // console.log(\"this.imagesrc\", this.image.src);\r\n          // console.log(\"this.image1\", this.image);\r\n          if (!this.image.src.includes(\"undefined\")) {\r\n            if (this.imagealpha === 1) {\r\n              this.ctx.drawImage(\r\n                this.image,\r\n                0,\r\n                0,\r\n                this.IMAGE_WIDTH,\r\n                this.IMAGE_HEIGHT\r\n              );\r\n            } else {\r\n              this.ctx.globalAlpha = this.imagealpha;\r\n              this.ctx.drawImage(\r\n                this.image,\r\n                0,\r\n                0,\r\n                this.IMAGE_WIDTH,\r\n                this.IMAGE_HEIGHT\r\n              );\r\n              this.ctx.globalAlpha = 1.0;\r\n            }\r\n          }\r\n        }\r\n      }\r\n      // 专注模式下，只显示选中图形\r\n      const renderList = this.focusMode\r\n        ? this.activeShape.type\r\n          ? [this.activeShape]\r\n          : []\r\n        : this.dataset;\r\n      for (let i = 0; i < renderList.length; i++) {\r\n        const shape = renderList[i];\r\n        if (shape.hiddening) continue;\r\n        switch (shape.type) {\r\n          case Shape.Rect:\r\n            this.drawRect(shape as Rect);\r\n            break;\r\n          case Shape.Polygon:\r\n            this.drawPolygon(shape as Polygon);\r\n            break;\r\n          case Shape.Dot:\r\n            this.drawDot(shape as Dot);\r\n            break;\r\n          case Shape.Line:\r\n            this.drawLine(shape as Line);\r\n            break;\r\n          case Shape.Circle:\r\n            this.drawCirle(shape as Circle);\r\n            break;\r\n          case Shape.Grid:\r\n            this.drawGrid(shape as Grid);\r\n            break;\r\n          case Shape.Brush:\r\n            this.drawBrush(shape as Brush);\r\n            break;\r\n          case Shape.Mask:\r\n            this.drawMask(shape as Mask);\r\n            break;\r\n          case Shape.Pencil:\r\n            this.drawPencil(shape as Pencil);\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n      }\r\n      if (\r\n        [\r\n          Shape.Rect,\r\n          Shape.Polygon,\r\n          Shape.Line,\r\n          Shape.Circle,\r\n          Shape.Grid\r\n        ].includes(this.activeShape.type) &&\r\n        !this.activeShape.hiddening\r\n      ) {\r\n        this.drawCtrlList(this.activeShape);\r\n      }\r\n      // 绘制智能标注点\r\n      if (this.magicPoints.length) {\r\n        for (const thisPrompt of this.magicPoints) {\r\n          this.drawPromptPointOnClick(thisPrompt, this.canvas);\r\n        }\r\n      }\r\n      this.ctx.restore();\r\n      this.emit(\"updated\", this.dataset);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 隐藏选中的图形\r\n   */\r\n  hideActiveShape(uuid: string) {\r\n    if (uuid) {\r\n      this.hideList.push(uuid);\r\n      for (let i = 0; i < this.dataset.length; i++) {\r\n        if (this.dataset[i].uuid === uuid) {\r\n          this.dataset[i].hiddening = true;\r\n          this.dataset[i].dragging = false;\r\n          this.dataset[i].active = false;\r\n          break;\r\n        }\r\n      }\r\n      this.update();\r\n      // this.manageDoneList(deepClone(this.dataset));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 显示隐藏的图形\r\n   */\r\n  showHiddenShape() {\r\n    if (this.hideList.length) {\r\n      for (let i = 0; i < this.dataset.length; i++) {\r\n        if (this.dataset[i].uuid === this.hideList[this.hideList.length - 1]) {\r\n          this.dataset[i].hiddening = false;\r\n          this.dataset[i].active = true;\r\n        } else {\r\n          this.dataset[i].active = false;\r\n        }\r\n      }\r\n      this.hideList.pop();\r\n      this.update();\r\n      // this.manageDoneList(deepClone(this.dataset));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 删除指定矩形\r\n   * @param index number\r\n   */\r\n  deleteByIndex(index: number) {\r\n    const num = this.dataset.findIndex((x) => x.index === index);\r\n    if (num > -1) {\r\n      this.emit(\"delete\", this.dataset[num]);\r\n      this.dataset.splice(num, 1);\r\n      this.dataset.forEach((item, i) => {\r\n        item.index = i;\r\n      });\r\n      this.update();\r\n      this.manageDoneList(deepClone(this.dataset));\r\n      // this.manageDoneList(deepClone(this.dataset));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 修改选中图像的标注信息\r\n   * @param tagId string\r\n   * @param label string\r\n   * @param color string\r\n   */\r\n  updateLabelByIndex(\r\n    index: number,\r\n    tagId: string,\r\n    label: string,\r\n    color: string,\r\n    properties: string[]\r\n  ) {\r\n    const updateProperties = (item: any) => {\r\n      properties.forEach((prop) => {\r\n        if (prop === \"label\") {\r\n          item.label = label;\r\n        } else if (prop === \"tagId\") {\r\n          item.tagId = tagId;\r\n        } else if (prop === \"strokeStyle\") {\r\n          // if(item.type === 7 && this.isRGBA(color)){\r\n          //     item.strokeStyle = this.rgbaToHex(color);\r\n          // } else {\r\n          item.strokeStyle = color;\r\n          // }\r\n        } else if (prop === \"textFillStyle\") {\r\n          item.textFillStyle = color;\r\n        } else if (prop === \"fillStyle\") {\r\n          // if(item.type === 7 && this.isRGBA(color)){\r\n          //     item.fillStyle = this.rgbaToHex(color);\r\n          // } else {\r\n          item.fillStyle = color;\r\n          // }\r\n        }\r\n      });\r\n    };\r\n\r\n    if (index !== -1) {\r\n      updateProperties(this.dataset[index]);\r\n      if (this.dataset[index].type === Shape.Pencil) {\r\n        this.emit(\"updateLabel\", this.dataset[index]);\r\n      }\r\n    } else {\r\n      // 注意:不能使用if(this.activeShape)判断，会始终为true\r\n      if (Object.keys(this.activeShape).length !== 0) {\r\n        updateProperties(this.activeShape);\r\n        if (this.activeShape.type === Shape.Pencil) {\r\n          this.emit(\"updateLabel\", this.activeShape);\r\n        }\r\n      }\r\n    }\r\n\r\n    this.update();\r\n    this.manageDoneList(deepClone(this.dataset));\r\n  }\r\n\r\n  /**\r\n   * 删除画布中创建的所有图形\r\n   * @param index number\r\n   */\r\n  deleteAllShape() {\r\n    this.dataset = [];\r\n    this.update();\r\n    this.manageDoneList(deepClone(this.dataset));\r\n  }\r\n\r\n  /**\r\n   * 复制指定矩形  水平为x，竖直为y\r\n   * @param index number\r\n   */\r\n  copyByIndex(index: number) {\r\n    const num = this.dataset.findIndex((x) => x.index === index);\r\n    if (num > -1) {\r\n      if (this.activeShape.type === Shape.Rect) {\r\n        const newItem = deepClone(this.dataset[num]); // 深拷贝对象\r\n        const height = newItem.coor[1][1] - newItem.coor[0][1];\r\n        const width = newItem.coor[1][0] - newItem.coor[0][0];\r\n        const [x, y] = this.mouse || [];\r\n        // 鼠标位置未超出图片背景\r\n        if (this.isPointInBackground(this.mouse)) {\r\n          if (\r\n            this.isPointInBackground([\r\n              x + width * this.scale,\r\n              y + height * this.scale\r\n            ])\r\n          ) {\r\n            // 如果鼠标区域为左上角，右下角未超出\r\n            newItem.coor[0] = [\r\n              (x - this.originX) / this.scale,\r\n              (y - this.originY) / this.scale\r\n            ];\r\n            newItem.coor[1] = [\r\n              (x - this.originX) / this.scale + width,\r\n              (y - this.originY) / this.scale + height\r\n            ];\r\n          } else if (\r\n            this.isPointInBackground([\r\n              x - width * this.scale,\r\n              y - height * this.scale\r\n            ])\r\n          ) {\r\n            // 如果鼠标区域为右下角，左上角未超出\r\n            newItem.coor[0] = [\r\n              (x - this.originX) / this.scale - width,\r\n              (y - this.originY) / this.scale - height\r\n            ];\r\n            newItem.coor[1] = [\r\n              (x - this.originX) / this.scale,\r\n              (y - this.originY) / this.scale\r\n            ];\r\n          } else if (\r\n            this.isPointInBackground([\r\n              x + width * this.scale,\r\n              y - height * this.scale\r\n            ])\r\n          ) {\r\n            // 如果鼠标区域为左下角，右上角未超出\r\n            newItem.coor[0] = [\r\n              (x - this.originX) / this.scale,\r\n              (y - this.originY) / this.scale - height\r\n            ];\r\n            newItem.coor[1] = [\r\n              (x - this.originX) / this.scale + width,\r\n              (y - this.originY) / this.scale\r\n            ];\r\n          } else if (\r\n            this.isPointInBackground([\r\n              x - width * this.scale,\r\n              y + height * this.scale\r\n            ])\r\n          ) {\r\n            // 如果鼠标区域为右上角，左下角未超出\r\n            newItem.coor[0] = [\r\n              (x - this.originX) / this.scale - width,\r\n              (y - this.originY) / this.scale\r\n            ];\r\n            newItem.coor[1] = [\r\n              (x - this.originX) / this.scale,\r\n              (y - this.originY) / this.scale + height\r\n            ];\r\n          } else {\r\n            return;\r\n          }\r\n        } else {\r\n          return;\r\n        }\r\n        newItem.uuid = createUuid();\r\n        this.dataset.push(newItem); // 添加到 dataset 中\r\n        this.dataset[num].active = false;\r\n        this.dataset.forEach((item, i) => {\r\n          item.index = i;\r\n        });\r\n        this.update();\r\n        this.manageDoneList(deepClone(this.dataset));\r\n      } else if (this.activeShape.type === Shape.Dot) {\r\n        const newItem = deepClone(this.dataset[num]);\r\n        const [x, y] = this.mouse || [];\r\n        if (this.isPointInBackground(this.mouse)) {\r\n          newItem.coor[0] = (x - this.originX) / this.scale;\r\n          newItem.coor[1] = (y - this.originY) / this.scale;\r\n          // 防止位置重叠\r\n          if (\r\n            newItem.coor[0] == this.dataset[num].coor[0] &&\r\n            newItem.coor[1] == this.dataset[num].coor[1]\r\n          ) {\r\n            newItem.coor[0] += 2;\r\n            newItem.coor[1] += 2;\r\n          }\r\n        } else {\r\n          return;\r\n        }\r\n        newItem.uuid = createUuid();\r\n        this.dataset.push(newItem); // 添加到 dataset 中\r\n        this.dataset[num].active = false;\r\n        this.dataset.forEach((item, i) => {\r\n          item.index = i;\r\n        });\r\n        this.update();\r\n        this.manageDoneList(deepClone(this.dataset));\r\n      } else if (this.activeShape.type === Shape.Circle) {\r\n        const newItem = new Circle(\r\n          {\r\n            ...this.dataset[num], // 复制所有简单属性\r\n            coor: [...this.dataset[num].coor], // 深拷贝数组\r\n            radius: this.activeShape.radius // 深拷贝 radius\r\n          },\r\n          this.dataset[num].index\r\n        );\r\n        const [x, y] = this.mouse || [];\r\n        if (this.isPointInBackground(this.mouse)) {\r\n          newItem.coor[0] = (x - this.originX) / this.scale;\r\n          newItem.coor[1] = (y - this.originY) / this.scale;\r\n          let point1: Point = [x - newItem.radius, y]; //左顶点\r\n          let point2: Point = [x + newItem.radius, y]; //右顶点\r\n          let point3: Point = [x, y - newItem.radius]; //上顶点\r\n          let point4: Point = [x, y + newItem.radius]; //下顶点\r\n          if (!this.isPointInBackground(point1)) {\r\n            newItem.coor[0] = (x - this.originX) / this.scale + newItem.radius;\r\n            newItem.coor[1] = (y - this.originY) / this.scale;\r\n            if (!this.isPointInBackground(point2)) {\r\n              return;\r\n            }\r\n          }\r\n          if (!this.isPointInBackground(point2)) {\r\n            newItem.coor[0] = (x - this.originX) / this.scale - newItem.radius;\r\n            newItem.coor[1] = (y - this.originY) / this.scale;\r\n            if (!this.isPointInBackground(point1)) {\r\n              return;\r\n            }\r\n          }\r\n          if (!this.isPointInBackground(point3)) {\r\n            newItem.coor[0] = (x - this.originX) / this.scale;\r\n            newItem.coor[1] = (y - this.originY) / this.scale + newItem.radius;\r\n            if (!this.isPointInBackground(point4)) {\r\n              return;\r\n            }\r\n          }\r\n          if (!this.isPointInBackground(point4)) {\r\n            newItem.coor[0] = (x - this.originX) / this.scale;\r\n            newItem.coor[1] = (y - this.originY) / this.scale - newItem.radius;\r\n            if (!this.isPointInBackground(point3)) {\r\n              return;\r\n            }\r\n          }\r\n        } else {\r\n          return;\r\n        }\r\n        newItem.uuid = createUuid();\r\n        this.dataset.push(newItem); // 添加到 dataset 中\r\n        this.dataset[num].active = false;\r\n        this.dataset.forEach((item, i) => {\r\n          item.index = i;\r\n        });\r\n        this.update();\r\n        this.manageDoneList(deepClone(this.dataset));\r\n        return;\r\n      } else if (this.activeShape.type === Shape.Line) {\r\n        return;\r\n      } else if (this.activeShape.type === Shape.Polygon) {\r\n        return;\r\n      } else if (this.activeShape.type === Shape.Grid) {\r\n        return;\r\n      } else if (this.activeShape.type === Shape.None) {\r\n        return;\r\n      } else {\r\n        return;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 计算缩放步长\r\n   */\r\n  // calcStep(flag = \"\") {\r\n  //   console.log(\"calcStep\");\r\n  //   // 如果图片小于指定的宽高，且 flag 为空或 'b'，执行放大操作\r\n  //   if (this.IMAGE_WIDTH < this.WIDTH && this.IMAGE_HEIGHT < this.HEIGHT) {\r\n  //     if (flag === \"\" || flag === \"b\") {\r\n  //       this.setScale(true, false, true); // 执行放大\r\n  //       // 仅在没有递归过的情况下才继续递归\r\n  //       if (flag !== \"b\") {\r\n  //         this.calcStep(\"b\"); // 递归调用，避免重复递归\r\n  //       }\r\n  //     }\r\n  //   }\r\n\r\n  //   // 如果图片大于指定的宽高，且 flag 为空或 's'，执行缩小操作\r\n  //   if (this.IMAGE_WIDTH > this.WIDTH || this.IMAGE_HEIGHT > this.HEIGHT) {\r\n  //     if (flag === \"\" || flag === \"s\") {\r\n  //       this.setScale(false, false, true); // 执行缩小\r\n  //       // 仅在没有递归过的情况下才继续递归\r\n  //       if (flag !== \"s\") {\r\n  //         this.calcStep(\"s\"); // 递归调用，避免重复递归\r\n  //       }\r\n  //     }\r\n  //   }\r\n  //   return;\r\n  // }\r\n  calcStep(flag = \"\") {\r\n    if (this.IMAGE_WIDTH < this.WIDTH && this.IMAGE_HEIGHT < this.HEIGHT) {\r\n      if (flag === \"\" || flag === \"b\") {\r\n        this.setScale(true, false, true);\r\n        this.calcStep(\"b\");\r\n      }\r\n    }\r\n    if (this.IMAGE_WIDTH > this.WIDTH || this.IMAGE_HEIGHT > this.HEIGHT) {\r\n      if (flag === \"\" || flag === \"s\") {\r\n        this.setScale(false, false, true);\r\n        this.calcStep(\"s\");\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 缩放\r\n   * @param type true放大5%，false缩小5%\r\n   * @param center 缩放中心 center|mouse\r\n   * @param pure 不绘制\r\n   */\r\n  setScale(type: boolean, byMouse = false, pure = false) {\r\n    if (this.lock) return;\r\n    if (\r\n      (!type && this.imageMin < this.MIN_LENGTH) ||\r\n      (type && this.IMAGE_WIDTH > this.imageOriginMax * 10)\r\n    )\r\n      return;\r\n    if (type) {\r\n      this.scaleStep++;\r\n    } else {\r\n      this.scaleStep--;\r\n    }\r\n    let realToLeft = 0;\r\n    let realToRight = 0;\r\n    const [x, y] = this.mouse || [];\r\n    if (byMouse) {\r\n      realToLeft = (x - this.originX) / this.scale;\r\n      realToRight = (y - this.originY) / this.scale;\r\n    }\r\n    const abs = Math.abs(this.scaleStep);\r\n    const width = this.IMAGE_WIDTH;\r\n    this.IMAGE_WIDTH = Math.round(\r\n      this.IMAGE_ORIGIN_WIDTH * (this.scaleStep >= 0 ? 1.05 : 0.95) ** abs\r\n    );\r\n    this.IMAGE_HEIGHT = Math.round(\r\n      this.IMAGE_ORIGIN_HEIGHT * (this.scaleStep >= 0 ? 1.05 : 0.95) ** abs\r\n    );\r\n    if (byMouse) {\r\n      this.originX = x - realToLeft * this.scale;\r\n      this.originY = y - realToRight * this.scale;\r\n    } else {\r\n      const scale = this.IMAGE_WIDTH / width;\r\n      this.originX = this.WIDTH / 2 - (this.WIDTH / 2 - this.originX) * scale;\r\n      this.originY = this.HEIGHT / 2 - (this.HEIGHT / 2 - this.originY) * scale;\r\n    }\r\n    this.emit(\"scale\", { type: type, byMouse: byMouse, pure: pure });\r\n    if (!pure) {\r\n      this.update();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 适配背景图\r\n   */\r\n  fitZoom() {\r\n    this.calcStep();\r\n    if (this.IMAGE_HEIGHT / this.IMAGE_WIDTH >= this.HEIGHT / this.WIDTH) {\r\n      this.IMAGE_WIDTH =\r\n        this.IMAGE_ORIGIN_WIDTH / (this.IMAGE_ORIGIN_HEIGHT / this.HEIGHT);\r\n      this.IMAGE_HEIGHT = this.HEIGHT;\r\n    } else {\r\n      this.IMAGE_WIDTH = this.WIDTH;\r\n      this.IMAGE_HEIGHT =\r\n        this.IMAGE_ORIGIN_HEIGHT / (this.IMAGE_ORIGIN_WIDTH / this.WIDTH);\r\n    }\r\n    this.originX = (this.WIDTH - this.IMAGE_WIDTH) / 2;\r\n    this.originY = (this.HEIGHT - this.IMAGE_HEIGHT) / 2;\r\n    this.emit(\"fitZoom\");\r\n    this.update();\r\n  }\r\n\r\n  /**\r\n   * 设置专注模式\r\n   * @param type {boolean}\r\n   */\r\n  setFocusMode(type: boolean) {\r\n    this.focusMode = type;\r\n    this.update();\r\n    // this.manageDoneList(deepClone(this.dataset));\r\n  }\r\n\r\n  manageDoneList(dataset: AllShape[]) {\r\n    this.doneList.push(dataset);\r\n    if (this.doneList.length > this.MAX_LENGTH) {\r\n      this.doneList.shift();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 撤销操作（目前不支持撤销隐藏、显示、专注等模式和状态切换）\r\n   * 若支持，需要设置一个操作数组，每次往doneList中push时，记录下操作类型。撤销时，执行相应的逆方法\r\n   */\r\n  undo() {\r\n    if (this.doneList.length > 1) {\r\n      const lastDoneItem = this.doneList[this.doneList.length - 1];\r\n      this.undoList.push(lastDoneItem);\r\n      this.doneList.pop();\r\n      const newShapes = deepClone(this.doneList[this.doneList.length - 1]);\r\n      this.setData(newShapes, false);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 重做操作\r\n   */\r\n  redo() {\r\n    if (this.undoList.length > 0) {\r\n      const lastDoneItem = this.undoList[this.undoList.length - 1];\r\n      this.manageDoneList(lastDoneItem);\r\n      this.undoList.pop();\r\n      const newShapes = deepClone(this.doneList[this.doneList.length - 1]);\r\n      this.setData(newShapes, false);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 销毁\r\n   */\r\n  destroy() {\r\n    this.image.removeEventListener(\"load\", this.handleLoad);\r\n    this.canvas.removeEventListener(\"contextmenu\", this.handleContextmenu);\r\n    this.canvas.removeEventListener(\"mousewheel\", this.handleMousewheel);\r\n    this.canvas.removeEventListener(\"mousedown\", this.handleMouseDown);\r\n    this.canvas.removeEventListener(\"touchend\", this.handleMouseDown);\r\n    this.canvas.removeEventListener(\"mousemove\", this.handleMouseMove);\r\n    this.canvas.removeEventListener(\"touchmove\", this.handleMouseMove);\r\n    this.canvas.removeEventListener(\"mouseup\", this.handleMouseUp);\r\n    this.canvas.removeEventListener(\"touchend\", this.handleMouseUp);\r\n    this.canvas.removeEventListener(\"dblclick\", this.handleDblclick);\r\n    document.body.removeEventListener(\"keydown\", this.handleKeydown, true);\r\n    document.body.removeEventListener(\"keyup\", this.handleKeyup, true);\r\n    this.canvas.width = this.WIDTH;\r\n    this.canvas.height = this.HEIGHT;\r\n    this.canvas.style.width = null;\r\n    this.canvas.style.height = null;\r\n    this.canvas.style.userSelect = null;\r\n  }\r\n\r\n  /**\r\n   * 重新设置画布大小\r\n   */\r\n  resize(\r\n    width: number,\r\n    height: number,\r\n    alpha: number = 1,\r\n    imageurl: string = \"\"\r\n  ) {\r\n    this.canvas.width = width;\r\n    this.canvas.height = height;\r\n    this.canvas.style.width = String(width) + \"px\";\r\n    this.canvas.style.height = String(height) + \"px\";\r\n    if (imageurl !== \"\" || this.imagesrc === undefined) {\r\n      this.imagesrc = imageurl;\r\n    }\r\n    this.setImage(this.imagesrc, alpha);\r\n    this.initSetting();\r\n    this.update();\r\n  }\r\n}\r\n","import Shape from './Shape';\r\n\r\nexport default class Rect extends Shape {\r\n  public type = 1\r\n  public iscontour = false\r\n  constructor(item: any, index: number) {\r\n    super(item, index)\r\n    // this.iscontour = item.iscontour || this.iscontour // 智能标注框\r\n  }\r\n  get ctrlsData() {\r\n    const [[x0, y0], [x1, y1]] = this.coor;\r\n    return [\r\n      [x0, y0],\r\n      [x0 + (x1 - x0) / 2, y0],\r\n      [x1, y0],\r\n      [x1, y0 + (y1 - y0) / 2],\r\n      [x1, y1],\r\n      [x0 + (x1 - x0) / 2, y1],\r\n      [x0, y1],\r\n      [x0, y0 + (y1 - y0) / 2],\r\n    ];\r\n  }\r\n}\r\n","import Shape from './Shape';\r\n\r\nexport default class Polygon extends Shape {\r\n  public type = 2\r\n  constructor(item: any, index: number) {\r\n    super(item, index)\r\n  }\r\n  get ctrlsData() {\r\n    return this.coor.length > 2 ? this.coor : [];\r\n  }\r\n}\r\n","import Shape from './Shape';\r\n\r\nexport default class Dot extends Shape {\r\n    public type = 3\r\n    public color = '' // 智能标注（SAM）时，green左键加点，red右键加点，''表示关键点（非智能标注点）\r\n    constructor(item: any, index: number) {\r\n        super(item, index)\r\n        this.color = item.color || this.color\r\n    }\r\n}\r\n","export default class EventBus {\r\n    private _eventTree: Record<string, any> = {}\r\n    /**\r\n   * 注册事件\r\n   * @param eventName 事件名称\r\n   * @param cb 回调方法\r\n   */\r\n    on(eventName: string, cb: Function) {\r\n        const fns = this._eventTree[eventName];\r\n        if (Array.isArray(fns)) {\r\n            fns.push(cb);\r\n        } else {\r\n            this._eventTree[eventName] = [cb];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 触发事件\r\n     * @param eventName 事件名称\r\n     * @param payload 传递参数\r\n     */\r\n    emit(eventName: string, ...payload: any) {\r\n        const fns = this._eventTree[eventName];\r\n        if (Array.isArray(fns)) {\r\n            fns.forEach((fn) => fn(...payload));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 注销事件\r\n     * @param eventName 事件名称\r\n     * @param cb 传递参数\r\n     */\r\n    off(eventName: string, cb: Function) {\r\n        const fns = this._eventTree[eventName];\r\n        const index = fns.find((fn: Function) => fn === cb);\r\n        if (Array.isArray(fns) && index) {\r\n            fns.splice(index, 1);\r\n        }\r\n    }\r\n}\r\n","import Shape from './Shape';\r\n\r\nexport default class Line extends Shape {\r\n  public type = 4\r\n  constructor(item: any, index: number) {\r\n    super(item, index)\r\n  }\r\n  get ctrlsData() {\r\n    return this.coor.length > 1 ? this.coor : [];\r\n  }\r\n}\r\n","import Shape from './Shape';\r\n\r\nexport default class Circle extends Shape {\r\n    public type = 5\r\n    public radius = 0\r\n    constructor(item: any, index: number) {\r\n        super(item, index)\r\n        this.radius = item.radius || this.radius\r\n    }\r\n    get ctrlsData() {\r\n        const [x, y] = this.coor\r\n        return [\r\n            [x, y - this.radius],\r\n            [x + this.radius, y],\r\n            [x, y + this.radius],\r\n            [x - this.radius, y]\r\n        ]\r\n    }\r\n}\r\n","import Shape from './Shape';\r\nimport Rect from './Rect'\r\n\r\nexport default class Grid extends Shape {\r\n  public type = 6\r\n  public row = 1\r\n  public col = 1\r\n  public selected: number[] = []\r\n  public selectedFillStyle: string\r\n\r\n  constructor(item: any, index: number) {\r\n    super(item, index)\r\n    this.row = item.row > 0 ? item.row : this.row\r\n    this.col = item.col > 0 ? item.col : this.col\r\n    this.selected = Array.isArray(item.selected) ? item.selected : []\r\n  }\r\n\r\n  get ctrlsData() {\r\n    const [[x0, y0], [x1, y1]] = this.coor;\r\n    return [\r\n      [x0, y0],\r\n      [x0 + (x1 - x0) / 2, y0],\r\n      [x1, y0],\r\n      [x1, y0 + (y1 - y0) / 2],\r\n      [x1, y1],\r\n      [x0 + (x1 - x0) / 2, y1],\r\n      [x0, y1],\r\n      [x0, y0 + (y1 - y0) / 2],\r\n    ];\r\n  }\r\n\r\n  get gridRects() {\r\n    const [[x0, y0], [x1, y1]] = this.coor;\r\n    const { row, col, strokeStyle, fillStyle, active, creating, lineWidth } = this;\r\n    const w = (x1 - x0) / this.col;\r\n    const h = (y1 - y0) / this.row;\r\n    const list: Rect[] = []\r\n    for (let i = 0; i < row; i++) {\r\n      for (let j = 0; j < col; j++) {\r\n        const startPoint = [x0 + j * w, y0 + i * h];\r\n        const index = i * col + j;\r\n        const shape = new Rect({\r\n          coor: [startPoint, [startPoint[0] + w, startPoint[1] + h]],\r\n          strokeStyle, fillStyle, active, creating, lineWidth\r\n        }, index);\r\n        list.push(shape)\r\n      }\r\n    }\r\n    return list;\r\n  }\r\n}\r\n","import Shape from \"./Shape\";\r\n\r\nexport default class Brush extends Shape {\r\n  public type = 7;\r\n  public brushWidth: number = 1;\r\n  public iseraser = false;\r\n  public boundingRect: number[] = [];\r\n  constructor(item: any, index: number) {\r\n    super(item, index);\r\n    this.iseraser = item.iseraser || this.iseraser;\r\n    this.boundingRect = item.boundingRect || this.boundingRect;\r\n  }\r\n\r\n  get ctrlsData() {\r\n    return this.coor.length > 3 ? this.coor : [];\r\n  }\r\n}\r\n","import Shape from './Shape';\r\ninterface MagicPoint {\r\n  coor: [number, number];\r\n  color: string;\r\n}\r\n\r\nexport default class Mask extends Shape {\r\n  public type = 8\r\n  public maskType = '' //everything || click || reat\r\n  public maskBase64 = ''\r\n  public pixels :number[] = []\r\n  public canvasData :ImageData = null \r\n  // public rectcoor = ''\r\n  public height = 0\r\n  public weight = 0\r\n  public maskToPolygon = false\r\n  public magicPoints : MagicPoint[] = []\r\n  constructor(item: any, index: number) {\r\n    super(item, index)\r\n    this.maskType = item.maskType || ''\r\n    this.maskBase64 = item.maskBase64 || ''\r\n    this.pixels = item.pixels || []\r\n    this.canvasData = item.canvasData || null\r\n    this.height = item.height || 0\r\n    this.weight = item.weight || 0\r\n    // this.rectcoor = item.rectcoor || this.rectcoor\r\n    this.maskToPolygon = item.maskToPolygon || false\r\n    this.magicPoints = item.magicPoints || []\r\n  }\r\n\r\n}\r\n","import Shape from \"./Shape\";\r\n\r\nexport default class Line extends Shape {\r\n  public type = 9;\r\n  public boundingRect: number[] = [];\r\n  constructor(item: any, index: number) {\r\n    super(item, index);\r\n    this.boundingRect = item.boundingRect || this.boundingRect;\r\n  }\r\n  get ctrlsData() {\r\n    return this.coor.length > 3 ? this.coor : [];\r\n  }\r\n}\r\n"],"names":["createUuid","s","hexDigits","i","m","Math","floor","random","slice","n","join","isPointInPolygon","x","y","vertices","inside","length","j","xi","yi","xj","yj","deepClone","obj","hash","WeakMap","has","get","ImageData","newImageData","Uint8ClampedArray","data","width","height","set","Date","getTime","RegExp","source","flags","Map","result_1","forEach","value","key","Set","result_2","add","Array","isArray","result_3","item","index","result","Object","create","getPrototypeOf","Reflect","ownKeys","deepEqual","obj1","obj2","keysToCompare","type","maskKeysToCompare_1","__values","maskKeysToCompare_1_1","done","next","keys1","keys","keys1_1","keys1_1_1","Shape","this","tagId","label","truncated","coor","active","creating","dragging","hiddening","locking","uuid","assign","Rect","_super","_this","call","iscontour","__extends","defineProperty","prototype","_a","__read","_b","x0","y0","_c","x1","y1","Polygon","Dot","color","EventBus","_eventTree","on","eventName","cb","fns","push","emit","payload","_i","arguments","fn","apply","__spreadArray","off","find","splice","Line","Circle","radius","Grid","row","col","selected","_d","strokeStyle","fillStyle","lineWidth","w","h","list","startPoint","shape","Brush","brushWidth","iseraser","boundingRect","Mask","maskType","maskBase64","pixels","canvasData","weight","maskToPolygon","magicPoints","CanvasSelect","el","src","version","pkg","lock","readonly","MIN_WIDTH","MIN_HEIGHT","MIN_RADIUS","MIN_POINTNUM","MIN_LENGTH","activeStrokeStyle","activeFillStyle","ctrlStrokeStyle","ctrlFillStyle","ctrlRadius","hideLabel","labelFillStyle","labelFontFamily","labelFontSize","textFillStyle","labelMaxLen","WIDTH","HEIGHT","imagesrc","imagealpha","olddataset","dataset","MAX_LENGTH","doneList","undoList","hideList","remmberOrigin","createType","None","ctrlIndex","clickIndex","image","Image","IMAGE_WIDTH","IMAGE_ORIGIN_HEIGHT","IMAGE_HEIGHT","originX","originY","scaleStep","scrollZoom","dblTouch","dblTouchStore","alpha","focusMode","scaleTouchStore","isTouch2","isMobile","navigator","userAgent","includes","labelUp","isCtrlKey","ctrlCode","gridMenuEnable","gridSelectedFillStyle","ispainting","brushlineWidth","brushstrokeStyle","pencillineWidth","pencilstrokeStyle","mask_alpha","densityFactor","activeCanvasData","activePolygon","isEraser","isErasing","eraserPoints","eraserSize","random_color","r","g","b","isMagicToolActive","getImagedataFromImageClass","masktype","maskCanvas","document","createElement","maskContext","getContext","willReadFrequently","console","error","tmpCanvas","tmpContext","drawImage","imageData","getImageData","pixelData","imageMask","maskData","colorIndex","putImageData","scaledCanvas","scaledContext","drawPromptPointOnClick","thisPrompt","canvas","scale","strokeColor","context","beginPath","arc","PI","fill","stroke","handleLoad","bind","handleContextmenu","handleMousewheel","handleMouseDown","handleMouseMove","handleMouseUp","handleDblclick","handleKeyup","handleKeydown","container","querySelector","HTMLCanvasElement","offScreen","initSetting","initEvents","setImage","red","green","blue","warn","IMAGE_ORIGIN_WIDTH","min","max","mergeEvent","e","mouseX","mouseY","mouseCX","mouseCY","touches","clientX","clientY","target","getBoundingClientRect","left","top_1","top","round","clientX1","_e","clientY1","abs","offsetX","offsetY","__assign","fitZoom","preventDefault","evt","stopPropagation","mouse","setScale","deltaY","buttons","ctrls","activeShape","ctrlsData","findIndex","isPointInCircle","log","remmber","isInBackground","nx","ny","hitOnShape","hitShapeIndex_1","hitShape","Pencil","pt","sort","a","newShape","curPoint","sp","update","rowCol","prompt","_f","split","test","Number","_g","_h","a0","b0","_j","a1","b1","concat","newPoint","newRadius","noLimit","_k","t1","tar","_l","sqrt","pow","which","touch0","touch1","cur","now","pop","removeDuplicatePoints","resultCoor","resultRect","manageDoneList","canPolygon","canLine","gridRects","rect","isPointInRect","thisIndex","code","activeElement","body","deleteByIndex","copyByIndex","dpr","window","devicePixelRatio","style","userSelect","ctx","clientWidth","clientHeight","offScreenCtx","addEventListener","getscaledPoint","url","crossOrigin","handleMaskShape","tempshape","maskImage","Promise","resolve","reject","onload","putDataOnCanvas","polygonShape","getContourPointsOfColoredRegion","onerror","err","setData","needCreate","toMask","setTimeout","__awaiter","initdata","itemIndexMap_1","data_1","data_1_1","toString","sent","undefined","mousePoint","hitShapeIndex","isPointInBackground","isPointInLine","isMouseInPixelsRegion","hitOnShapeVertex","point","pointX","pointY","map","isPointOnRectEdge","onLeftEdge","onRightEdge","onTopEdge","onBottomEdge","isPointOnRectVertex","onLeftTopPoint","onRightBottomEdge","onRightTopEdge","onLeftBottomEdge","save","clearRect","translate","moveTo","lineTo","closePath","areaData","restore","isPointOnPolygonVertex","some","center","isPointOnCircleVertex","getBoundingBoxOfColoredRegion","xMin","xMax","yMin","yMax","contourPoints","isBorderPoint","uniquePoints","sampledPoints","samplePointsByDensity","sortByPolarAngle","directions_1","directions_1_1","dx","dy","points","step","calculateCentroid","sumX","sumY","points_1","points_1_1","count","calculatePolarAngle","atan2","isNested","shape1","shape2","x2","y2","x3","y3","x4","y4","vertices1","vertices2","_m","drawRect","sub","fillRect","strokeRect","drawLabel","drawPolygon","lineJoin","calculateCenter","drawDot","drawCirle","drawLine","hexToRGBA","hex","hexCode","replace","char","parseInt","rgbaToHex","rgba","includeAlpha","rgbaArray","trim","match","parseFloat","hexR","padStart","hexG","hexB","hexA","isRGBA","getBunding","removePoints","seen","maxX","minX","maxY","minY","drawBrush","lineCap","globalCompositeOperation","drawGrid","selectedFillStyle","isSelected","drawCtrl","drawCtrlList","Error","sum","reduce","acc","thisCanvas","thisContext","replacementColor","highlightMask","activeColor","changeMaskPolygon","endMagicTool","drawMask","self","addPoint","deletePoint","drawPencil","hasEndPoint","validCoor","filter","clip","isHideLabel","isLabelUp","currLineWidth","newText","text","measureText","font","labelWidth","textPaddingLeft","labelHeight","textPaddingTop","toleft","toTop","toTop2","isup","rectX","rectY","rectWidth","rectHeight","fontSize","textWidth","textMetrics","fontBoundingBoxAscent","fontBoundingBoxDescent","textBaseline","textX","textY","fillText","cancelAnimationFrame","timer","requestAnimationFrame","globalAlpha","renderList","hideActiveShape","showHiddenShape","num","updateLabelByIndex","properties","updateProperties","prop","deleteAllShape","newItem","point1","point2","point3","point4","calcStep","flag","byMouse","pure","imageMin","imageOriginMax","realToLeft","realToRight","setFocusMode","shift","undo","lastDoneItem","newShapes","redo","destroy","removeEventListener","resize","imageurl","String"],"mappings":"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"}